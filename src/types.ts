/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * atomic radius
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-elemental-atomic-radius".
 */
export type AtomicRadius = ScalarSchema & PropertiesDirectoryElementalAtomicRadiusProperties;
/**
 * electronegativity for the element (Pauling scale)
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-elemental-electronegativity".
 */
export type Electronegativity = ScalarSchema & PropertiesDirectoryElementalElectronegativityProperties;
/**
 * ionization potential for the element
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-elemental-ionization-potential".
 */
export type IonizationPotential = ScalarSchema & PropertiesDirectoryElementalIonizationPotentialProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "job".
 */
export type JobSchema = BaseJobSchema & JobProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "job-base".
 */
export type BaseJobSchema = NamedDefaultableHasMetadataInMemoryEntitySchema & JobBaseProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "in-memory-entity-named-defaultable-has-metadata".
 */
export type NamedDefaultableHasMetadataInMemoryEntitySchema = BaseInMemoryEntitySchema &
  NameEntitySchema &
  DefaultableEntitySchema &
  MetadataSchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "in-memory-entity-base".
 */
export type BaseInMemoryEntitySchema = SchemaVersion & InMemoryEntityBaseProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow".
 */
export type WorkflowSchema = BaseWorkflowSchema & WorkflowProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-base".
 */
export type BaseWorkflowSchema = NamedDefaultableHasMetadataInMemoryEntitySchema & WorkflowBaseProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-subworkflow".
 */
export type Subworkflow = BaseFlow & WorkflowSubworkflowProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit".
 */
export type WorkflowUnitSchema = NamedDefaultableRuntimeItemsInMemoryEntitySchema & WorkflowUnitProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "in-memory-entity-named-defaultable-runtime-items".
 */
export type NamedDefaultableRuntimeItemsInMemoryEntitySchema = BaseInMemoryEntitySchema &
  NameEntitySchema &
  DefaultableEntitySchema &
  RuntimeItemsSchemaPrePostProcessorsMonitorsResults;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-runtime-runtime-item".
 */
export type RuntimeItemSchema = NameResultSchema | RuntimeItemString;
/**
 * name of runtime item in shortened notation
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-runtime--runtime-item-string".
 */
export type RuntimeItemString = string;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-io".
 */
export type DataIOUnitSchema = WorkflowUnitSchema & WorkflowUnitIoProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-io-db".
 */
export type DataIODatabaseInputOutputSchema =
  | {
      /**
       * IDs of item to retrieve from db
       */
      ids: string[];
    }
  | {
      /**
       * db collection name
       */
      collection: string;
      /**
       * whether the result should be saved as draft
       */
      draft: boolean;
    };
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-map".
 */
export type MapUnitSchema = WorkflowUnitSchema & WorkflowUnitMapProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-reduce".
 */
export type ReduceUnitSchema = WorkflowUnitSchema & WorkflowUnitReduceProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-condition".
 */
export type ConditionUnitSchema = WorkflowUnitSchema & WorkflowUnitConditionProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-assertion".
 */
export type AssertionUnitSchema = WorkflowUnitSchema & WorkflowUnitAssertionProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-execution".
 */
export type ExecutionUnitSchemaBase = WorkflowUnitSchema &
  RuntimeItemsSchemaPrePostProcessorsMonitorsResults &
  WorkflowUnitExecutionProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-executable".
 */
export type ExecutableSchema = RuntimeItemsSchemaPrePostProcessorsMonitorsResults & SoftwareExecutableProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-flavor".
 */
export type FlavorSchema = RuntimeItemsSchemaPrePostProcessorsMonitorsResults & SoftwareFlavorProperties;
export type ExecutionUnitInputSchema = ExecutionUnitInputIdItemSchemaForPhysicsBasedSimulationEngines[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-assignment".
 */
export type AssignmentUnitSchema = WorkflowUnitSchema & WorkflowUnitAssignmentProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-processing".
 */
export type ProcessingUnitSchema = WorkflowUnitSchema & WorkflowUnitProcessingProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "material".
 */
export type MaterialSchema = NamedDefaultableHasMetadataInMemoryEntitySchema & MaterialProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-abstract-vector".
 */
export type VectorSchema = ArrayOf3NumberElementsSchema | ArrayOf3BooleanElementsSchema;
/**
 * @minItems 3
 * @maxItems 3
 */
export type ArrayOf3NumberElementsSchema = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
export type ArrayOf3NumberElementsSchema1 = ArrayOfNumbers;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-array-of-numbers".
 */
export type ArrayOfNumbers = number[];
export type ArrayOf3NumberElementsSchema2 = [unknown, unknown, unknown];
/**
 * @minItems 3
 * @maxItems 3
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-array-of---booleans".
 */
export type ArrayOf3BooleanElementsSchema = [boolean, boolean, boolean];
/**
 * array of objects containing integer id each
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-array-of-ids".
 */
export type AtomicIds = {
  /**
   * integer id of this entry
   */
  id?: number;
}[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-basis-bonds".
 */
export type BondsSchema = {
  /**
   * indices of the two connected atoms
   */
  atomPair?: AtomicIds;
  bondType?: "single" | "double" | "triple" | "quadruple" | "aromatic" | "tautomeric" | "dative" | "other";
}[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-lattice".
 */
export type LatticeSchema = {
  vectors?: LatticeExplicitUnit;
} & LatticeImplicitSchema &
  PropertiesDirectoryStructuralLatticeProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-lattice-lattice-vectors".
 */
export type LatticeExplicitUnit = DimensionalVectorBasis & PropertiesDirectoryStructuralLatticeLatticeVectorsProperties;
export type ArrayOf3NumberElementsSchema3 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
export type ArrayOf3NumberElementsSchema4 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
export type ArrayOf3NumberElementsSchema5 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-lattice-lattice-bravais".
 */
export type LatticeImplicitSchema = DimensionalLatticeSchema &
  PropertiesDirectoryStructuralLatticeLatticeBravaisProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-volume".
 */
export type VolumeSchema = ScalarSchema & PropertiesDirectoryStructuralVolumeProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-density".
 */
export type DensitySchema = ScalarSchema & PropertiesDirectoryStructuralDensityProperties;
/**
 * ration of this element in the compound
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-elemental-ratio".
 */
export type ElementalRatio = ScalarSchema & PropertiesDirectoryStructuralElementalRatioProperties;
/**
 * https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-p-norm".
 */
export type PNorm = ScalarSchema & PropertiesDirectoryStructuralPNormProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-inchi".
 */
export type InChIRepresentationSchema = PrimitiveString & PropertiesDirectoryStructuralInchiProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-inchi-key".
 */
export type InChIKeyRepresentationSchema = PrimitiveString & PropertiesDirectoryStructuralInchiKeyProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-derived-properties".
 */
export type DerivedPropertiesSchema = (
  | VolumeSchema
  | DensitySchema
  | SymmetrySchema
  | ElementalRatio
  | PNorm
  | InChIRepresentationSchema
  | InChIKeyRepresentationSchema
)[];
/**
 * contains either object with slugified entry or slug only as a string
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-slugified-entry-or-slug".
 */
export type SlugifiedEntryOrSlug = SlugifiedEntry | string;
/**
 * Descriptive properties of a model, that do not change the underlying physical principles of the model. Example: localization for local-orbital DFT.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "model-augmentations".
 */
export type ModelAugmentationSchema = ArrayOfStrings;
/**
 * array of strings, e.g. metadata tags
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-array-of-strings".
 */
export type ArrayOfStrings = string[];
/**
 * Additions to a model, that expand upon the underlying physical principle without fundamentally changing the working equations (e.g. in a linear fashion). Examples: Hubbard U, external potential, explicit correlation
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "model-modifiers".
 */
export type ModelModificationsSchema = ArrayOfStrings;
/**
 * Descriptive (searchable) attributes of model, generic. Example: user-adjustable.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "model-tags".
 */
export type ModelTagsSchema = ArrayOfStrings;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "project".
 */
export type ProjectSchema = NamedDefaultableHasMetadataInMemoryEntitySchema & ProjectProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference".
 */
export type ReferenceSchemaUsingAnyOfInsteadOfOneOfBelowBCCurrentReferenceSchemasOverlap =
  | InfoForPropertyObtainedByModelingOnlySupportsExabyteOriginatedDataAtmButEasilyExtendable
  | InfoForCharacteristicObtainedByExperiment
  | LiteratureReferenceSchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference-modeling".
 */
export type InfoForPropertyObtainedByModelingOnlySupportsExabyteOriginatedDataAtmButEasilyExtendable =
  InfoForCharacteristicObtainedByExabyteCalculation;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive--d-data-series".
 */
export type DimensionDataSeriesSchema = [number | string, ...(number | string)[]][];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-abstract--d-plot".
 */
export type DimensionPlotSchema = DimensionDataSchema & CoreAbstractDPlotProperties;
export type ArrayOf3NumberElementsSchema6 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
export type ArrayOf3NumberElementsSchema7 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
/**
 * @minItems 3
 * @maxItems 3
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-abstract--d-tensor".
 */
export type DimensionalTensorSchema = [
  ArrayOf3NumberElementsSchema8,
  ArrayOf3NumberElementsSchema9,
  ArrayOf3NumberElementsSchema10
];
export type ArrayOf3NumberElementsSchema8 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
export type ArrayOf3NumberElementsSchema9 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
export type ArrayOf3NumberElementsSchema10 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-abstract-point".
 */
export type PointSchema = ArrayOf3NumberElementsSchema11;
export type ArrayOf3NumberElementsSchema11 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-array-of---numbers".
 */
export type ArrayOf3NumberElementsSchema12 = ArrayOf3NumberElementsSchema1 & ArrayOf3NumberElementsSchema2;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reusable-atomic-scalars".
 */
export type AtomicScalarsVectorsSchema = AtomicScalarsVectorsSchema1 & AtomicScalarsVectorsSchema2;
export type AtomicScalarsVectorsSchema1 = AtomicIds;
export type AtomicScalarsVectorsSchema2 = {
  value?: ScalarSchema;
}[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reusable-atomic-strings".
 */
export type AtomicStringsVectorsSchema = AtomicStringsVectorsSchema1 & AtomicStringsVectorsSchema2;
export type AtomicStringsVectorsSchema1 = AtomicIds;
export type AtomicStringsVectorsSchema2 = {
  value?: string;
}[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reusable-atomic-vectors".
 */
export type AtomicVectorsSchema = AtomicVectorsSchema1 & AtomicVectorsSchema2;
export type AtomicVectorsSchema1 = AtomicIds;
export type AtomicVectorsSchema2 = {
  value?: VectorSchema;
}[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reusable-band-gap".
 */
export type BandGapSchema = ScalarSchema & CoreReusableBandGapProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reusable-energy".
 */
export type EnergySchema = ScalarSchema & CoreReusableEnergyProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "in-memory-entity-defaultable".
 */
export type DefaultableInMemoryEntitySchema = BaseInMemoryEntitySchema & DefaultableEntitySchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "in-memory-entity-named".
 */
export type NamedInMemoryEntitySchema = BaseInMemoryEntitySchema & NameEntitySchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "in-memory-entity-named-defaultable".
 */
export type NamedDefaultableInMemoryEntitySchema = BaseInMemoryEntitySchema &
  NameEntitySchema &
  DefaultableEntitySchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-local-orbital".
 */
export type LocalAtomicOrbitalsMethodSchema = MethodSchemaBase & MethodsDirectoryLocalOrbitalProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-pseudopotential".
 */
export type PseudopotentialMethodSchema = MethodSchemaBase & MethodsDirectoryPseudopotentialProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-regression".
 */
export type LinearMethodsSchema = MethodSchemaBase & MethodsDirectoryRegressionProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-unknown".
 */
export type UnknownMethodsSchema = MethodSchemaBase & MethodsDirectoryUnknownProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-regression-data".
 */
export type RegressionData = LinearRegressionParametersSchema | KernelRidgeRegressionParametersSchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-regression-precision".
 */
export type RegressionPrecision = PrecisionSchemaForRegression;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb".
 */
export type ModelsDirectoryPb = ModelsDirectoryPb1 & {};
export type ModelsDirectoryPb1 = NewModelSchemaBase & ModelsDirectoryPbProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-st".
 */
export type ModelsDirectorySt = ModelsDirectorySt1 & {};
export type ModelsDirectorySt1 = ModelSchemaBase & ModelsDirectoryStProperties;
/**
 * schema for cases when model is unknown
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-unknown".
 */
export type UnknownModelSchema = ModelSchemaBase & ModelsDirectoryUnknownProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm".
 */
export type ModelsDirectoryPbQm = ModelsDirectoryPbQm1 & {};
export type ModelsDirectoryPbQm1 = ModelsDirectoryPb1 & ModelsDirectoryPbQmProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-abin".
 */
export type ModelsDirectoryPbQmAbin = ModelsDirectoryPbQmAbin1 & {};
export type ModelsDirectoryPbQmAbin1 = ModelsDirectoryPbQm1 & ModelsDirectoryPbQmAbinProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft".
 */
export type ModelsDirectoryPbQmDft = ModelsDirectoryPbQmDft1 & {};
export type ModelsDirectoryPbQmDft1 = ModelsDirectoryPbQm1 & ModelsDirectoryPbQmDftProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional".
 */
export type ExchangeCorrelationFunctionalBaseSchema = SlugifiedEntry & ModelsDirectoryPbQmDftFunctionalProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-component".
 */
export type FunctionalComponentSchema = SlugifiedEntry & ModelsDirectoryPbQmDftFunctionalComponentProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-semp".
 */
export type SemiEmpiricalModelSchema = ModelsDirectoryPbQm1 & ModelsDirectoryPbQmSempProperties;
/**
 * Augmentations specific to semi-empirical type only.
 */
export type ModelsDirectoryPbQmSempAugmentations = ModelsDirectoryPbQmSempAugmentations1 &
  ModelsDirectoryPbQmSempAugmentations2;
export type ModelsDirectoryPbQmSempAugmentations1 = ModelAugmentationSchema;
export type ModelsDirectoryPbQmSempAugmentations2 = unknown[];
/**
 * Modifiers specific to semi-empirical type only.
 */
export type ModelsDirectoryPbQmSempModifiers = ModelsDirectoryPbQmSempModifiers1 & ModelsDirectoryPbQmSempModifiers2;
export type ModelsDirectoryPbQmSempModifiers1 = ModelModificationsSchema;
export type ModelsDirectoryPbQmSempModifiers2 = unknown[];
/**
 * Tags specific to semi-empirical type only.
 */
export type ModelsDirectoryPbQmSempTags = ModelsDirectoryPbQmSempTags1 & ModelsDirectoryPbQmSempTags2;
export type ModelsDirectoryPbQmSempTags1 = ModelTagsSchema;
export type ModelsDirectoryPbQmSempTags2 = unknown[];
export type ModelsDirectoryPbQmTags = ModelTagsSchema;
export type ModelsDirectoryPbQmTags1 = "excited-states"[];
/**
 * configuration interaction wavefunction model
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-abin-configuration-interaction".
 */
export type ConfigurationInteractionSchema = ModelsDirectoryPbQmAbin1 &
  ModelsDirectoryPbQmAbinConfigurationInteractionProperties;
/**
 * Augmentations specific to this model type only.
 */
export type ModelsDirectoryPbQmAbinConfigurationInteractionAugmentations =
  ModelsDirectoryPbQmAbinConfigurationInteractionAugmentations1 &
    ModelsDirectoryPbQmAbinConfigurationInteractionAugmentations2;
export type ModelsDirectoryPbQmAbinConfigurationInteractionAugmentations1 = ModelAugmentationSchema;
export type ModelsDirectoryPbQmAbinConfigurationInteractionAugmentations2 = unknown[];
/**
 * Modifiers specific to this model type only.
 */
export type ModelsDirectoryPbQmAbinConfigurationInteractionModifiers =
  ModelsDirectoryPbQmAbinConfigurationInteractionModifiers1 & ModelsDirectoryPbQmAbinConfigurationInteractionModifiers2;
export type ModelsDirectoryPbQmAbinConfigurationInteractionModifiers1 = ModelModificationsSchema;
export type ModelsDirectoryPbQmAbinConfigurationInteractionModifiers2 = (unknown | "multi-reference")[];
/**
 * Tags specific to this model type only.
 */
export type ModelsDirectoryPbQmAbinConfigurationInteractionTags = ModelsDirectoryPbQmAbinConfigurationInteractionTags1 &
  ModelsDirectoryPbQmAbinConfigurationInteractionTags2;
export type ModelsDirectoryPbQmAbinConfigurationInteractionTags1 = ModelTagsSchema;
export type ModelsDirectoryPbQmAbinConfigurationInteractionTags2 = (
  | "excited-states"
  | "scaling-degree:6"
  | "user-adjustable"
)[];
export type ModelsDirectoryPbQmAbinModifiers = ModelModificationsSchema;
export type ModelsDirectoryPbQmAbinModifiers1 = "multi-reference"[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft".
 */
export type KohnShamDensityFunctionTheorySchema = ModelsDirectoryPbQmDft1 & ModelsDirectoryPbQmDftKsdftProperties;
/**
 * Augmentations specific to DFT model type only.
 */
export type ModelsDirectoryPbQmDftKsdftAugmentations = ModelsDirectoryPbQmDftKsdftAugmentations1 &
  ModelsDirectoryPbQmDftKsdftAugmentations2;
export type ModelsDirectoryPbQmDftKsdftAugmentations1 = ModelAugmentationSchema;
export type ModelsDirectoryPbQmDftKsdftAugmentations2 = unknown[];
/**
 * Modifiers specific to this model type only.
 */
export type ModelsDirectoryPbQmDftKsdftModifiers = ModelsDirectoryPbQmDftKsdftModifiers1 &
  ModelsDirectoryPbQmDftKsdftModifiers2;
export type ModelsDirectoryPbQmDftKsdftModifiers1 = ModelModificationsSchema;
export type ModelsDirectoryPbQmDftKsdftModifiers2 = (unknown | "external-field")[];
/**
 * Tags specific to DFT model type only.
 */
export type ModelsDirectoryPbQmDftKsdftTags = ModelsDirectoryPbQmDftKsdftTags1 & ModelsDirectoryPbQmDftKsdftTags2;
export type ModelsDirectoryPbQmDftKsdftTags1 = ModelTagsSchema;
export type ModelsDirectoryPbQmDftKsdftTags2 = (unknown | "scaling-degree:3" | "user-adjustable")[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-dft-d".
 */
export type EmpiricalDFTDDispersionModel = EmpiricalDispersionModelAppliedPostSCF &
  ModelsDirectoryPbQmDftDispersionModelsDirectoryDftDProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-generalized-post-empirical".
 */
export type EmpiricalDispersionModelAppliedPostSCF = GeneralizedDFTDispersionModel &
  ModelsDirectoryPbQmDftDispersionModelsDirectoryGeneralizedPostEmpiricalProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-exchange-dipole".
 */
export type ExchangeDipoleDispersionModel = EmpiricalDispersionModelAppliedPostSCF &
  ModelsDirectoryPbQmDftDispersionModelsDirectoryExchangeDipoleProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-many-body-dispersion".
 */
export type ManyBodyDispersionSchema = AbInitioDispersionModelAppliedPostSCF &
  ModelsDirectoryPbQmDftDispersionModelsDirectoryManyBodyDispersionProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-generalized-post-abin".
 */
export type AbInitioDispersionModelAppliedPostSCF = GeneralizedDFTDispersionModel &
  ModelsDirectoryPbQmDftDispersionModelsDirectoryGeneralizedPostAbinProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-non-local-correlation".
 */
export type NonLocalCorrelationDensityFunctional = AbInitioDispersionModelAppliedDuringSCF &
  ModelsDirectoryPbQmDftDispersionModelsDirectoryNonLocalCorrelationProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-generalized-intra-abin".
 */
export type AbInitioDispersionModelAppliedDuringSCF = GeneralizedDFTDispersionModel &
  ModelsDirectoryPbQmDftDispersionModelsDirectoryGeneralizedIntraAbinProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-tkatchenko-scheffler".
 */
export type TkatchenkoSchefflerVanDerWaalsApproach = EmpiricalDispersionModelAppliedPostSCF &
  ModelsDirectoryPbQmDftDispersionModelsDirectoryTkatchenkoSchefflerProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-generalized-intra-empirical".
 */
export type EmpiricalDispersionModelAppliedDuringSCF = GeneralizedDFTDispersionModel &
  ModelsDirectoryPbQmDftDispersionModelsDirectoryGeneralizedIntraEmpiricalProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-local-functional-components".
 */
export type ModelsDirectoryPbQmDftFunctionalLocalFunctionalComponents =
  | LocalFunctionalLdaComponentSchema
  | LocalFunctionalGga
  | LocalFunctionalMggaComponentSchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-local-functional-lda".
 */
export type LocalFunctionalLdaComponentSchema = LocalFunctional &
  (
    | {
        name?: "Slater";
        slug?: "slater";
        type?: "exchange";
      }
    | {
        name?: "Perdew-Zunger 1981";
        slug?: "pz81";
        type?: "correlation";
      }
    | {
        name?: "Perdew-Wang 1992";
        slug?: "pw92";
        type?: "correlation";
      }
    | {
        name?: "PW92RPA";
        slug?: "pw92rpa";
        type?: "correlation";
      }
    | {
        name?: "VWN1RPA";
        slug?: "vwn1rpa";
        type?: "correlation";
      }
    | {
        name?: "VWN1";
        slug?: "vwn1";
        type?: "correlation";
      }
    | {
        name?: "VWN2";
        slug?: "vwn2";
        type?: "correlation";
      }
    | {
        name?: "VWN3";
        slug?: "vwn3";
        type?: "correlation";
      }
    | {
        name?: "VWN4";
        slug?: "vwn4";
        type?: "correlation";
      }
    | {
        name?: "VWN5";
        slug?: "vwn5";
        type?: "correlation";
      }
    | {
        name?: "Liu-Parr";
        slug?: "liu-parr";
        type?: "correlation";
      }
    | {
        name?: "Proynov-Kong 2009";
        slug?: "pk09";
        type?: "correlation";
      }
    | {
        name?: "Wigner";
        slug?: "wigner";
        type?: "correlation";
      }
  );
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-local-functional".
 */
export type LocalFunctional = FunctionalComponentSchema &
  ModelsDirectoryPbQmDftFunctionalComponentsDirectoryLocalFunctionalProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-local-functional-gga".
 */
export type LocalFunctionalGga = LocalFunctional &
  (
    | {
        name?: "PBE";
        slug?: "pbe-x";
        type?: "exchange";
      }
    | {
        name?: "srPBE";
        slug?: "srpbe-x";
        type?: "exchange";
      }
    | {
        name?: "revPBE";
        slug?: "revpbe-x";
        type?: "exchange";
      }
    | {
        name?: "muPBE";
        slug?: "mupbe-x";
        type?: "exchange";
      }
    | {
        name?: "wPBE";
        slug?: "wpbe-x";
        type?: "exchange";
      }
    | {
        name?: "PBEsol";
        slug?: "pbesol-x";
        type?: "exchange";
      }
    | {
        name?: "RPBE";
        slug?: "rpbe-x";
        type?: "exchange";
      }
    | {
        name?: "Becke 1986";
        slug?: "b86";
        type?: "exchange";
      }
    | {
        name?: "modified B86";
        slug?: "mb86";
        type?: "exchange";
      }
    | {
        name?: "Becke 1988";
        slug?: "b88";
        type?: "exchange";
      }
    | {
        name?: "srB88";
        slug?: "mub88";
        type?: "exchange";
      }
    | {
        name?: "B88 re-fit";
        slug?: "optb88";
        type?: "exchange";
      }
    | {
        name?: "AK13";
        slug?: "ak13";
        type?: "exchange";
      }
    | {
        name?: "Perdew-Wang 1986";
        slug?: "pw86";
        type?: "exchange";
      }
    | {
        name?: "revised PW86";
        slug?: "rpw86";
        type?: "exchange";
      }
    | {
        name?: "Perdew-Wang 1991";
        slug?: "pw91-x";
        type?: "exchange";
      }
    | {
        name?: "modified PW91";
        slug?: "mpw91";
        type?: "exchange";
      }
    | {
        name?: "Gill 1996";
        slug?: "g96";
        type?: "exchange";
      }
    | {
        name?: "Handy-Cohen";
        slug?: "optx";
        type?: "exchange";
      }
    | {
        name?: "second order GGA";
        slug?: "sogga";
        type?: "exchange";
      }
    | {
        name?: "Becke 1997";
        slug?: "b97-x";
        type?: "exchange";
      }
    | {
        name?: "short range Becke 1997";
        slug?: "srb97";
        type?: "exchange";
      }
    | {
        name?: "PBE";
        slug?: "pbe-c";
        type?: "correlation";
      }
    | {
        name?: "srPBE";
        slug?: "srpbe-c";
        type?: "correlation";
      }
    | {
        name?: "PBEsol";
        slug?: "pbesol-c";
        type?: "correlation";
      }
    | {
        name?: "modified PBE";
        slug?: "pbeloc";
        type?: "correlation";
      }
    | {
        name?: "one-parameter progressive PBE";
        slug?: "pbeop-c";
        type?: "correlation";
      }
    | {
        name?: "one-parameter progressive B88";
        slug?: "bop-c";
        type?: "correlation";
      }
    | {
        name?: "vPBEc or regTPSS";
        slug?: "vpbec";
        type?: "correlation";
      }
    | {
        name?: "LYP";
        slug?: "lyp";
        type?: "correlation";
      }
    | {
        name?: "Perdew-Wang 1986";
        slug?: "p86";
        type?: "correlation";
      }
    | {
        name?: "P86 from VWN5";
        slug?: "p86vwn5";
        type?: "correlation";
      }
    | {
        name?: "Perdew-Wang 1991";
        slug?: "pw91-c";
        type?: "correlation";
      }
    | {
        name?: "Becke 1997";
        slug?: "b97-c";
        type?: "correlation";
      }
  );
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-local-functional-mgga".
 */
export type LocalFunctionalMggaComponentSchema = LocalFunctional &
  (
    | {
        name?: "TPSS";
        slug?: "tpss-x";
        type?: "exchange";
      }
    | {
        name?: "revised TPSS";
        slug?: "revtpss-x";
        type?: "exchange";
      }
    | {
        name?: "one-parameter TPSS";
        slug?: "modtpss";
        type?: "exchange";
      }
    | {
        name?: "oTPSS";
        slug?: "otpss-x";
        type?: "exchange";
      }
    | {
        name?: "regularized TPSS";
        slug?: "regtpss";
        type?: "exchange";
      }
    | {
        name?: "BLOC";
        slug?: "bloc";
        type?: "exchange";
      }
    | {
        name?: "PBE-GX";
        slug?: "pbegx";
        type?: "exchange";
      }
    | {
        name?: "Perdew-Kurt-Zupan-Blaha";
        slug?: "pkzb-x";
        type?: "exchange";
      }
    | {
        name?: "SCAN";
        slug?: "scan-x";
        type?: "exchange";
      }
    | {
        name?: "Tao-Mo";
        slug?: "tm-x";
        type?: "exchange";
      }
    | {
        name?: "TPSS";
        slug?: "tpss-c";
        type?: "correlation";
      }
    | {
        name?: "revTPSS";
        slug?: "revtpss-c";
        type?: "correlation";
      }
    | {
        name?: "TPSSloc";
        slug?: "tpssloc";
        type?: "correlation";
      }
    | {
        name?: "oTPSS";
        slug?: "otpss-c";
        type?: "correlation";
      }
    | {
        name?: "Becke 1995";
        slug?: "B95";
        type?: "correlation";
      }
    | {
        name?: "Proynov-Kong 2006";
        slug?: "pk06";
        type?: "correlation";
      }
    | {
        name?: "Perdew-Kurt-Zupan-Blaha";
        slug?: "pkzb-c";
        type?: "correlation";
      }
    | {
        name?: "SCAN";
        slug?: "scan-c";
        type?: "correlation";
      }
    | {
        name?: "Tao-Mo";
        slug?: "tm-c";
        type?: "correlation";
      }
  );
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-dispersion-correction".
 */
export type DispersionCorrectionSchemaMayBeDeprecatedInFavorOfGeneralizedDispersionModel = FunctionalComponentSchema &
  (
    | {
        name?: "VV10";
        slug?: "vv10";
        type?: "non-local correlation";
      }
    | {
        name?: "rVV10";
        slug?: "rvv10";
        type?: "non-local correlation";
      }
  );
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-exact-exchange".
 */
export type ExactExchangeComponentSchema = FunctionalComponentSchema &
  ModelsDirectoryPbQmDftFunctionalComponentsDirectoryExactExchangeProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-mp--correlation".
 */
export type SecondOrderMollerPlessetMP2CorrelationCorrectionSchema = FunctionalComponentSchema &
  ModelsDirectoryPbQmDftFunctionalComponentsDirectoryMpCorrelationProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-range-separated-exchange".
 */
export type RangeSeparatedExchangeSchema = FunctionalComponentSchema &
  ModelsDirectoryPbQmDftFunctionalComponentsDirectoryRangeSeparatedExchangeProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-double-hybrid".
 */
export type DoubleHybridFunctionalModelSchema = KohnShamDensityFunctionTheorySchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-gga".
 */
export type GeneralizedGradientApproximationModelSchema = KohnShamDensityFunctionTheorySchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-hybrid".
 */
export type HybridFunctionalModelSchema = KohnShamDensityFunctionTheorySchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-lda".
 */
export type LocalDensityApproximationModelSchema = KohnShamDensityFunctionTheorySchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-mgga".
 */
export type MetaGeneralizedGradientApproximationModelSchema = KohnShamDensityFunctionTheorySchema;
/**
 * Augmentations specific to hybrid functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-double-hybrid-augmentations".
 */
export type ModelsDirectoryPbQmDftKsdftDoubleHybridAugmentations =
  ModelsDirectoryPbQmDftKsdftDoubleHybridAugmentations1 & ModelsDirectoryPbQmDftKsdftDoubleHybridAugmentations2;
export type ModelsDirectoryPbQmDftKsdftDoubleHybridAugmentations1 = ModelAugmentationSchema;
export type ModelsDirectoryPbQmDftKsdftDoubleHybridAugmentations2 = unknown[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-double-hybrid-functional".
 */
export type DoubleHybridFunctionalSchema = ExchangeCorrelationFunctionalBaseSchema &
  ModelsDirectoryPbQmDftKsdftDoubleHybridFunctionalProperties;
/**
 * Modifiers specific to hybrid functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-double-hybrid-modifiers".
 */
export type ModelsDirectoryPbQmDftKsdftDoubleHybridModifiers = ModelsDirectoryPbQmDftKsdftDoubleHybridModifiers1 &
  ModelsDirectoryPbQmDftKsdftDoubleHybridModifiers2;
export type ModelsDirectoryPbQmDftKsdftDoubleHybridModifiers1 = ModelModificationsSchema;
export type ModelsDirectoryPbQmDftKsdftDoubleHybridModifiers2 = (unknown | "external-field")[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-double-hybrid-range-separated-functional".
 */
export type RangeSeparatedDoubleHybridExchangeCorrelationFunctionalBaseSchema = DoubleHybridFunctionalSchema &
  ModelsDirectoryPbQmDftKsdftDoubleHybridRangeSeparatedFunctionalProperties;
/**
 * Tags specific to hybrid functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-double-hybrid-tags".
 */
export type ModelsDirectoryPbQmDftKsdftDoubleHybridTags = ModelsDirectoryPbQmDftKsdftDoubleHybridTags1 &
  ModelsDirectoryPbQmDftKsdftDoubleHybridTags2;
export type ModelsDirectoryPbQmDftKsdftDoubleHybridTags1 = ModelTagsSchema;
export type ModelsDirectoryPbQmDftKsdftDoubleHybridTags2 = (unknown | "scaling-degree:3" | "user-adjustable")[];
/**
 * Augmentations specific to GGA functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-gga-augmentations".
 */
export type ModelsDirectoryPbQmDftKsdftGgaAugmentations = ModelsDirectoryPbQmDftKsdftGgaAugmentations1 &
  ModelsDirectoryPbQmDftKsdftGgaAugmentations2;
export type ModelsDirectoryPbQmDftKsdftGgaAugmentations1 = ModelAugmentationSchema;
export type ModelsDirectoryPbQmDftKsdftGgaAugmentations2 = unknown[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-gga-functional".
 */
export type GGAFunctionalKeySchema = ExchangeCorrelationFunctionalBaseSchema &
  ModelsDirectoryPbQmDftKsdftGgaFunctionalProperties;
/**
 * Modifiers specific to GGA functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-gga-modifiers".
 */
export type ModelsDirectoryPbQmDftKsdftGgaModifiers = ModelsDirectoryPbQmDftKsdftGgaModifiers1 &
  ModelsDirectoryPbQmDftKsdftGgaModifiers2;
export type ModelsDirectoryPbQmDftKsdftGgaModifiers1 = ModelModificationsSchema;
export type ModelsDirectoryPbQmDftKsdftGgaModifiers2 = (unknown | "external-field")[];
/**
 * Tags specific to GGA functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-gga-tags".
 */
export type ModelsDirectoryPbQmDftKsdftGgaTags = ModelsDirectoryPbQmDftKsdftGgaTags1 &
  ModelsDirectoryPbQmDftKsdftGgaTags2;
export type ModelsDirectoryPbQmDftKsdftGgaTags1 = ModelTagsSchema;
export type ModelsDirectoryPbQmDftKsdftGgaTags2 = (unknown | "scaling-degree:3" | "user-adjustable")[];
/**
 * Augmentations specific to hybrid functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-hybrid-augmentations".
 */
export type ModelsDirectoryPbQmDftKsdftHybridAugmentations = ModelsDirectoryPbQmDftKsdftHybridAugmentations1 &
  ModelsDirectoryPbQmDftKsdftHybridAugmentations2;
export type ModelsDirectoryPbQmDftKsdftHybridAugmentations1 = ModelAugmentationSchema;
export type ModelsDirectoryPbQmDftKsdftHybridAugmentations2 = unknown[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-hybrid-functional".
 */
export type HybridFunctionalSchema = ExchangeCorrelationFunctionalBaseSchema &
  ModelsDirectoryPbQmDftKsdftHybridFunctionalProperties;
/**
 * Modifiers specific to hybrid functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-hybrid-modifiers".
 */
export type ModelsDirectoryPbQmDftKsdftHybridModifiers = ModelsDirectoryPbQmDftKsdftHybridModifiers1 &
  ModelsDirectoryPbQmDftKsdftHybridModifiers2;
export type ModelsDirectoryPbQmDftKsdftHybridModifiers1 = ModelModificationsSchema;
export type ModelsDirectoryPbQmDftKsdftHybridModifiers2 = (unknown | "external-field")[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-hybrid-range-separated-functional".
 */
export type RangeSeparatedHybridExchangeCorrelationFunctionalBaseSchema = HybridFunctionalSchema &
  ModelsDirectoryPbQmDftKsdftHybridRangeSeparatedFunctionalProperties;
/**
 * Tags specific to hybrid functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-hybrid-tags".
 */
export type ModelsDirectoryPbQmDftKsdftHybridTags = ModelsDirectoryPbQmDftKsdftHybridTags1 &
  ModelsDirectoryPbQmDftKsdftHybridTags2;
export type ModelsDirectoryPbQmDftKsdftHybridTags1 = ModelTagsSchema;
export type ModelsDirectoryPbQmDftKsdftHybridTags2 = (unknown | "scaling-degree:3" | "user-adjustable")[];
/**
 * Augmentations specific to LDA functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-lda-augmentations".
 */
export type ModelsDirectoryPbQmDftKsdftLdaAugmentations = ModelsDirectoryPbQmDftKsdftLdaAugmentations1 &
  ModelsDirectoryPbQmDftKsdftLdaAugmentations2;
export type ModelsDirectoryPbQmDftKsdftLdaAugmentations1 = ModelAugmentationSchema;
export type ModelsDirectoryPbQmDftKsdftLdaAugmentations2 = unknown[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-lda-functional".
 */
export type LDAFunctionalSchema = ExchangeCorrelationFunctionalBaseSchema &
  ModelsDirectoryPbQmDftKsdftLdaFunctionalProperties;
/**
 * Modifiers specific to LDA functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-lda-modifiers".
 */
export type ModelsDirectoryPbQmDftKsdftLdaModifiers = ModelsDirectoryPbQmDftKsdftLdaModifiers1 &
  ModelsDirectoryPbQmDftKsdftLdaModifiers2;
export type ModelsDirectoryPbQmDftKsdftLdaModifiers1 = ModelModificationsSchema;
export type ModelsDirectoryPbQmDftKsdftLdaModifiers2 = (unknown | "external-field")[];
/**
 * Tags specific to LDA functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-lda-tags".
 */
export type ModelsDirectoryPbQmDftKsdftLdaTags = ModelsDirectoryPbQmDftKsdftLdaTags1 &
  ModelsDirectoryPbQmDftKsdftLdaTags2;
export type ModelsDirectoryPbQmDftKsdftLdaTags1 = ModelTagsSchema;
export type ModelsDirectoryPbQmDftKsdftLdaTags2 = (unknown | "scaling-degree:3" | "user-adjustable")[];
/**
 * Augmentations specific to meta-GGA functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-mgga-augmentations".
 */
export type ModelsDirectoryPbQmDftKsdftMggaAugmentations = ModelsDirectoryPbQmDftKsdftMggaAugmentations1 &
  ModelsDirectoryPbQmDftKsdftMggaAugmentations2;
export type ModelsDirectoryPbQmDftKsdftMggaAugmentations1 = ModelAugmentationSchema;
export type ModelsDirectoryPbQmDftKsdftMggaAugmentations2 = unknown[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-mgga-functional".
 */
export type MetaGGAFunctionalKeySchema = ExchangeCorrelationFunctionalBaseSchema &
  ModelsDirectoryPbQmDftKsdftMggaFunctionalProperties;
/**
 * Modifiers specific to meta-GGA functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-mgga-modifiers".
 */
export type ModelsDirectoryPbQmDftKsdftMggaModifiers = ModelsDirectoryPbQmDftKsdftMggaModifiers1 &
  ModelsDirectoryPbQmDftKsdftMggaModifiers2;
export type ModelsDirectoryPbQmDftKsdftMggaModifiers1 = ModelModificationsSchema;
export type ModelsDirectoryPbQmDftKsdftMggaModifiers2 = (unknown | "external-field")[];
/**
 * Tags specific to meta-GGA functionals only.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-mgga-tags".
 */
export type ModelsDirectoryPbQmDftKsdftMggaTags = ModelsDirectoryPbQmDftKsdftMggaTags1 &
  ModelsDirectoryPbQmDftKsdftMggaTags2;
export type ModelsDirectoryPbQmDftKsdftMggaTags1 = ModelTagsSchema;
export type ModelsDirectoryPbQmDftKsdftMggaTags2 = (unknown | "scaling-degree:3" | "user-adjustable")[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-st-det".
 */
export type ModelsDirectoryStDet = ModelsDirectorySt1 & ModelsDirectoryStDetProperties;
/**
 * machine learning model type/subtype schema
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-st-det-ml".
 */
export type MachineLearningModelSchema = NewModelSchemaBase & ModelsDirectoryStDetMlProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-average-potential-profile".
 */
export type AveragePotentialProfileSchema = DimensionPlotSchema &
  PropertiesDirectoryNonScalarAveragePotentialProfileProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-band-structure".
 */
export type BandStructureSchema = DimensionPlotSchema & PropertiesDirectoryNonScalarBandStructureProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-charge-density-profile".
 */
export type ChargeDensityProfileSchema = DimensionPlotSchema &
  PropertiesDirectoryNonScalarChargeDensityProfileProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-density-of-states".
 */
export type DensityOfStatesSchema = DimensionPlotSchema & PropertiesDirectoryNonScalarDensityOfStatesProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-file-content".
 */
export type FileContent = FileMetadata & PropertiesDirectoryNonScalarFileContentProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-phonon-dispersions".
 */
export type PhononBandStructureSchema = DimensionPlotSchema & PropertiesDirectoryNonScalarPhononDispersionsProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-phonon-dos".
 */
export type PhononDensityOfStatesSchema = DimensionPlotSchema & PropertiesDirectoryNonScalarPhononDosProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-potential-profile".
 */
export type PotentialProfileSchema = DimensionPlotSchema & PropertiesDirectoryNonScalarPotentialProfileProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-reaction-energy-profile".
 */
export type ReactionEnergyProfileSchema = DimensionPlotSchema &
  PropertiesDirectoryNonScalarReactionEnergyProfileProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-vibrational-spectrum".
 */
export type VibrationalSpectrumSchema = DimensionPlotSchema & PropertiesDirectoryNonScalarVibrationalSpectrumProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-electron-affinity".
 */
export type ElectronAffinitySchema = EnergySchema & PropertiesDirectoryScalarElectronAffinityProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-fermi-energy".
 */
export type FermiEnergySchema = EnergySchema & PropertiesDirectoryScalarFermiEnergyProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-formation-energy".
 */
export type FormationEnergySchema = EnergySchema & PropertiesDirectoryScalarFormationEnergyProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-ionization-potential".
 */
export type IonizationPotentialSchema = EnergySchema & PropertiesDirectoryScalarIonizationPotentialProperties;
/**
 * average pressure in unit cell
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-pressure".
 */
export type Pressure = ScalarSchema & PropertiesDirectoryScalarPressureProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-reaction-energy-barrier".
 */
export type ReactionEnergyBarrierSchema = EnergySchema & PropertiesDirectoryScalarReactionEnergyBarrierProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-surface-energy".
 */
export type SurfaceEnergySchema = EnergySchema & PropertiesDirectoryScalarSurfaceEnergyProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-total-energy".
 */
export type TotalEnergySchema = EnergySchema & PropertiesDirectoryScalarTotalEnergyProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-total-force".
 */
export type TotalForcesSchema = ScalarSchema & PropertiesDirectoryScalarTotalForceProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-valence-band-offset".
 */
export type ValenceBandOffsetSchema = EnergySchema & PropertiesDirectoryScalarValenceBandOffsetProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-zero-point-energy".
 */
export type ZeroPointEnergySchema = EnergySchema & PropertiesDirectoryScalarZeroPointEnergyProperties;
export type AtomicVectorsSchema3 = AtomicVectorsSchema1 & AtomicVectorsSchema2;
export type AtomicVectorsSchema4 = AtomicVectorsSchema1 & AtomicVectorsSchema2;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-molecular-pattern".
 */
export type MolecularPatternSchema = (FunctionalGroupPatternSchema | RingPatternSchema | SpecialBondPatternSchema)[];
export type AtomicVectorsSchema5 = AtomicVectorsSchema1 & AtomicVectorsSchema2;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "property-best".
 */
export type SchemaOfMaterialSBestProperties = SchemaOfMaterialSProperty & PropertyBestProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "property-refined".
 */
export type SchemaOfMaterialSProperty = SchemaOfMaterialSPreliminaryProperty & PropertyRefinedProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "property-raw".
 */
export type SchemaOfMaterialSPreliminaryProperty = BaseInMemoryEntitySchema & PropertyRawProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "property-meta".
 */
export type SchemaOfMaterialSMetaProperties = SchemaOfMaterialSPreliminaryProperty;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-template".
 */
export type TemplateSchema = ExecutionUnitInputItemSchemaForPhysicsBasedSimulationEngines & SoftwareTemplateProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-execution".
 */
export type SoftwareDirectoryMlUnitExecution =
  | CrossValidationUnitSchema
  | TrainUnitSchema
  | TrainScoreSchema
  | InitializeUnitSchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-execution-evaluate-cross-validate".
 */
export type CrossValidationUnitSchema = ExecutionUnitSchemaBase &
  SoftwareDirectoryMlUnitExecutionEvaluateCrossValidateProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-execution-train".
 */
export type TrainUnitSchema = ExecutionUnitSchemaBase & SoftwareDirectoryMlUnitExecutionTrainProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-execution-score".
 */
export type TrainScoreSchema = ExecutionUnitSchemaBase & SoftwareDirectoryMlUnitExecutionScoreProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-execution-initialize".
 */
export type InitializeUnitSchema = ExecutionUnitSchemaBase & SoftwareDirectoryMlUnitExecutionInitializeProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-processing".
 */
export type SoftwareDirectoryMlUnitProcessing =
  | SoftwareDirectoryMlUnitProcessingDataTransformation
  | SoftwareDirectoryMlUnitProcessingFeatureSelection;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-processing-data-transformation".
 */
export type SoftwareDirectoryMlUnitProcessingDataTransformation = ScaleAndReduceUnitSchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-processing-data-transformation-scale-and-reduce".
 */
export type ScaleAndReduceUnitSchema = ProcessingUnitSchema &
  SoftwareDirectoryMlUnitProcessingDataTransformationScaleAndReduceProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-processing-feature-selection".
 */
export type SoftwareDirectoryMlUnitProcessingFeatureSelection = FilterBasedFeatureSelectionUnitSchema;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-processing-feature-selection-filter-based".
 */
export type FilterBasedFeatureSelectionUnitSchema = ProcessingUnitSchema &
  SoftwareDirectoryMlUnitProcessingFeatureSelectionFilterBasedProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-processing-data-transformation-manipulation".
 */
export type ManipulationUnitSchema = ProcessingUnitSchema &
  SoftwareDirectoryMlUnitProcessingDataTransformationManipulationProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-modeling-nwchem".
 */
export type NWChem = ApplicationSchemaBase & SoftwareDirectoryModelingNwchemProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-modeling-vasp".
 */
export type ViennaAbInitoSimulationPackage = ApplicationSchemaBase & SoftwareDirectoryModelingVaspProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-modeling-unit-execution".
 */
export type ExecutionUnitSchemaForPhysicsBasedSimulationEnginesDefinedUsingEspressoAsExample = ExecutionUnitSchemaBase &
  ExecutionUnitInputSchemaForPhysicsBasedSimulationEngines;
export type ExecutionUnitInputSchema1 = (
  | ExecutionUnitInputItemSchemaForPhysicsBasedSimulationEngines
  | ExecutionUnitInputIdItemSchemaForPhysicsBasedSimulationEngines
)[];
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-scripting-jupyter-lab".
 */
export type JupyterLabApplicationSchema = ApplicationSchemaBase & SoftwareDirectoryScriptingJupyterLabProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-scripting-python".
 */
export type PythonProgramingLanguageSchema = ApplicationSchemaBase & SoftwareDirectoryScriptingPythonProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-scripting-shell".
 */
export type ShellScriptingLanguageSchema = ApplicationSchemaBase & SoftwareDirectoryScriptingShellProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-scripting-unit-execution".
 */
export type ExecutionUnitSchemaForScriptingBasedApplications = ExecutionUnitSchemaBase &
  ExecutionUnitInputSchemaForPhysicsBasedSimulationEngines;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system--material".
 */
export type MaterialEntityReferenceSchema = EntityReferenceSchema & SystemMaterialProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system--parent-job".
 */
export type ParentJobEntityReferenceSchema = EntityReferenceSchema & SystemParentJobProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system--project".
 */
export type ProjectEntityReferenceSchema = EntityReferenceSchema & SystemProjectProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-creator".
 */
export type CreatorEntityReferenceSchema = EntityReferenceSchema & SystemCreatorProperties;
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-owner".
 */
export type EntityOwnerReferenceSchema = EntityReferenceSchema & SystemOwnerProperties;

export interface GlobalSchema {}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "element".
 */
export interface ElementSchema {
  /**
   * Element symbol.
   */
  symbol?: string;
  /**
   * list of elemental properties
   */
  properties?: (AtomicRadius | Electronegativity | IonizationPotential)[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-scalar".
 */
export interface ScalarSchema {
  value: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-elemental-atomic-radius-properties".
 */
export interface PropertiesDirectoryElementalAtomicRadiusProperties {
  name?: "atomic_radius";
  units?: "km" | "m" | "pm" | "nm" | "angstrom" | "a.u." | "bohr" | "fractional" | "crystal" | "cartesian" | "alat";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-elemental-electronegativity-properties".
 */
export interface PropertiesDirectoryElementalElectronegativityProperties {
  name?: "electronegativity";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-elemental-ionization-potential-properties".
 */
export interface PropertiesDirectoryElementalIonizationPotentialProperties {
  name?: "ionization_potential";
  units?: "kJ/mol" | "eV" | "J/mol" | "hartree" | "cm-1" | "rydberg" | "eV/atom";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-schema-version".
 */
export interface SchemaVersion {
  /**
   * entity's schema version. Used to distinct between different schemas.
   */
  schemaVersion?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "in-memory-entity-base-properties".
 */
export interface InMemoryEntityBaseProperties {
  /**
   * entity identity
   */
  _id?: string;
  /**
   * entity slug
   */
  slug?: string;
  systemName?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-name".
 */
export interface NameEntitySchema {
  /**
   * entity name
   */
  name?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-defaultable".
 */
export interface DefaultableEntitySchema {
  /**
   * Identifies that entity is defaultable
   */
  isDefault?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-metadata".
 */
export interface MetadataSchema {
  metadata?: {};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "job-base-properties".
 */
export interface JobBaseProperties {
  /**
   * Identity used to track jobs originated from command-line
   */
  rmsId?: string;
  /**
   * job status
   */
  status?:
    | "pre-submission"
    | "queued"
    | "submitted"
    | "active"
    | "finished"
    | "terminate-queued"
    | "terminated"
    | "error"
    | "deleted"
    | "timeout";
  /**
   * Approximate start time of the job. e.g. within 10 min
   */
  startTime?: string;
  /**
   * The path to the working directory of this job, when the job originates from command-line
   */
  workDir?: string;
  compute?: ComputeArgumentsSchema;
  _project?: EntityReferenceSchema;
  _material?: EntityReferenceSchema;
  parent?: EntityReferenceSchema;
  /**
   * Context variables that the job will have access to at runtime
   */
  runtimeContext?: {};
}
/**
 * Custom keywords prefixed with validate correspond to custom validation methods implemented downstream
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "job-compute".
 */
export interface ComputeArgumentsSchema {
  /**
   * Name of the submission queues: https://docs.mat3ra.com/infrastructure/resource/queues/. Below enums are for Azure, then AWS circa 2022-08, hence the duplication.
   */
  queue:
    | "D"
    | "OR"
    | "OF"
    | "OFplus"
    | "SR"
    | "SF"
    | "SFplus"
    | "GPOF"
    | "GP2OF"
    | "GP4OF"
    | "GPSF"
    | "GP2SF"
    | "GP4SF"
    | "OR4"
    | "OR8"
    | "OR16"
    | "SR4"
    | "SR8"
    | "SR16"
    | "GOF"
    | "G4OF"
    | "G8OF"
    | "GSF"
    | "G4SF"
    | "G8SF";
  /**
   * number of nodes used for the job inside the RMS.
   */
  nodes: number;
  /**
   * number of CPUs used for the job inside the RMS.
   */
  ppn: number;
  /**
   * Wallclock time limit for computing a job. Clock format: 'hh:mm:ss'
   */
  timeLimit: string;
  /**
   * Convention to use when reasoning about time limits
   */
  timeLimitType?: "per single attempt" | "compound";
  /**
   * Job is allowed to restart on termination.
   */
  isRestartable?: boolean;
  /**
   * Email notification for the job: n - never, a - job aborted, b - job begins, e - job ends. Last three could be combined.
   */
  notify?: string;
  /**
   * Email address to notify about job execution.
   */
  email?: string;
  /**
   * Maximum CPU count per node. This parameter is used to let backend job submission infrastructure know that this job is to be charged for the maximum CPU per node instead of the actual ppn. For premium/fast queues where resources are provisioned on-demand and exclusively per user.
   */
  maxCPU?: number;
  /**
   * Optional arguments specific to using application - VASP, Quantum Espresso, etc. Specified elsewhere
   */
  arguments?: QuantumEspressoArgumentsSchema;
  /**
   * Cluster where the job is executed. Optional on create. Required on job submission.
   */
  cluster?: {
    /**
     * FQDN of the cluster. e.g. master-1-staging.exabyte.io
     */
    fqdn?: string;
    /**
     * Job's identity in RMS. e.g. 1234.master-1-staging.exabyte.io
     */
    jid?: string;
  };
  /**
   * Computation error. Optional. Appears only if something happens on jobs execution.
   */
  errors?: {
    /**
     * Domain of the error appearance (internal).
     */
    domain?: "rupy" | "alfred" | "celim" | "webapp";
    /**
     * Should be a short, unique, machine-readable error code string. e.g. FileNotFound
     */
    reason?: string;
    /**
     * Human-readable error message. e.g. 'File Not Found: /home/demo/data/project1/job-123/job-config.json'
     */
    message?: string;
    /**
     * Full machine-readable error traceback. e.g. FileNotFound
     */
    traceback?: string;
  }[];
  /**
   * A Python compatible regex to exclude files from upload. e.g. ^.*.txt& excludes all files with .txt suffix
   */
  excludeFilesPattern?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-modeling-espresso-arguments".
 */
export interface QuantumEspressoArgumentsSchema {
  /**
   * Processors can be divided into different `images`, each corresponding to a different self-consistent or linear-response calculation, loosely coupled to others.
   */
  nimage?: number;
  /**
   * Each image can be subpartitioned into `pools`, each taking care of a group of k-points.
   */
  npools?: number;
  /**
   * Each pool is subpartitioned into `band groups`, each taking care of a group of Kohn-Sham orbitals (also called bands, or wavefunctions).
   */
  nband?: number;
  /**
   * In order to allow good parallelization of the 3D FFT when the number of processors exceeds the number of FFT planes, FFTs on Kohn-Sham states are redistributed to `task` groups so that each group can process several wavefunctions at the same time.
   */
  ntg?: number;
  /**
   * A further level of parallelization, independent on PW or k-point parallelization, is the parallelization of subspace diagonalization / iterative orthonormalization. Both operations required the diagonalization of arrays whose dimension is the number of Kohn-Sham states (or a small multiple of it). All such arrays are distributed block-like across the `linear-algebra group`, a subgroup of the pool of processors, organized in a square 2D grid. As a consequence the number of processors in the linear-algebra group is given by n2, where n is an integer; n2 must be smaller than the number of processors in the PW group. The diagonalization is then performed in parallel using standard linear algebra operations.
   */
  ndiag?: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-entity-reference".
 */
export interface EntityReferenceSchema {
  /**
   * entity identity
   */
  _id?: string;
  /**
   * entity class
   */
  cls?: string;
  /**
   * entity slug
   */
  slug?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "job-properties".
 */
export interface JobProperties {
  workflow?: WorkflowSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-base-properties".
 */
export interface WorkflowBaseProperties {
  /**
   * Array of characteristic properties calculated by this workflow (TODO: add enums)
   */
  properties?: (string | {})[];
  /**
   * Whether to use the dataset tab in the job designer. Mutually exclusive with using the materials tab.
   */
  isUsingDataset?: boolean;
  /**
   * Array of workflows with the same schema as the current one.
   */
  workflows?: {}[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-properties".
 */
export interface WorkflowProperties {
  /**
   * Array of subworkflows. Subworkflow can be an instance of workflow to allow for nesting
   */
  subworkflows?: Subworkflow[];
  /**
   * Contains the Units of the Workflow
   */
  units?: (
    | WorkflowUnitSchema
    | DataIOUnitSchema
    | MapUnitSchema
    | ReduceUnitSchema
    | ConditionUnitSchema
    | AssertionUnitSchema
    | ExecutionUnitSchemaBase
    | AssignmentUnitSchema
    | ProcessingUnitSchema
  )[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-base-flow".
 */
export interface BaseFlow {
  /**
   * subworkflow identity
   */
  _id?: string;
  /**
   * Human-readable name of the subworkflow. e.g. Total-energy
   */
  name: string;
  /**
   * Array of characteristic properties calculated by this subworkflow
   */
  properties?: (string | {})[];
  compute?: ComputeArgumentsSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-subworkflow-properties".
 */
export interface WorkflowSubworkflowProperties {
  /**
   * Contains the Units of the subworkflow
   */
  units?: WorkflowUnitSchema[];
  model?: ModelSchemaBase;
  application?: ApplicationSchemaBase;
  /**
   * Defines whether to store the results/properties extracted in this unit to properties collection
   */
  isDraft?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-runtime-runtime-items".
 */
export interface RuntimeItemsSchemaPrePostProcessorsMonitorsResults {
  /**
   * names of the pre-processors for this calculation
   */
  preProcessors?: RuntimeItemSchema[];
  /**
   * names of the post-processors for this calculation
   */
  postProcessors?: RuntimeItemSchema[];
  /**
   * names of the monitors for this calculation
   */
  monitors?: RuntimeItemSchema[];
  /**
   * names of the results for this calculation
   */
  results?: RuntimeItemSchema[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-runtime--runtime-item-name-object".
 */
export interface NameResultSchema {
  /**
   * The name of this item. e.g. scf_accuracy
   */
  name: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-properties".
 */
export interface WorkflowUnitProperties {
  _id?: string;
  isDraft?: boolean;
  /**
   * type of the unit
   */
  type?: string;
  /**
   * name of the unit. e.g. pw_scf
   */
  name?: string;
  /**
   * Status of the unit.
   */
  status?: "idle" | "active" | "warning" | "error" | "finished";
  /**
   * Whether this unit is the first one to be executed.
   */
  head?: boolean;
  /**
   * Identity of the unit in the workflow. Used to trace the execution flow of the workflow.
   */
  flowchartId?: string;
  /**
   * Next unit's flowchartId. If empty, the current unit is the last.
   */
  next?: string;
  /**
   * Whether Rupy should attempt to use Jinja templating to add context variables into the unit
   */
  enableRender?: boolean;
  context?: {};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "model".
 */
export interface ModelSchemaBase {
  /**
   * general type of the model, eg. `dft`
   */
  type: string;
  /**
   * general subtype of the model, eg. `lda`
   */
  subtype: string;
  method: MethodSchemaBase;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "method".
 */
export interface MethodSchemaBase {
  /**
   * general type of this method, eg. `pseudopotential`
   */
  type: string;
  /**
   * general subtype of this method, eg. `ultra-soft`
   */
  subtype: string;
  /**
   * Object showing the actual possible precision based on theory and implementation
   */
  precision?: {};
  /**
   * additional data specific to method, eg. array of pseudopotentials
   */
  data?: {};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-application".
 */
export interface ApplicationSchemaBase {
  /**
   * The name of the application. e.g. espresso
   */
  name: string;
  /**
   * The short name of the application. e.g. qe
   */
  shortName?: string;
  /**
   * Application's short description.
   */
  summary?: string;
  /**
   * Application version. e.g. 5.3.5
   */
  version?: string;
  /**
   * Application build. e.g. VTST
   */
  build?: string;
  /**
   * Whether advanced compute options are present
   */
  hasAdvancedComputeOptions?: boolean;
  /**
   * Whether licensing is present
   */
  isLicensed?: boolean;
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-io-properties".
 */
export interface WorkflowUnitIoProperties {
  type?: "io";
  subtype?: "input" | "output" | "dataFrame";
  source?: "api" | "db" | "object_storage";
  input?: (DataIORestAPIInputSchema | DataIODatabaseInputOutputSchema | ObjectStorageIoSchema)[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-io-api".
 */
export interface DataIORestAPIInputSchema {
  /**
   * rest API endpoint
   */
  endpoint: string;
  /**
   * rest API endpoint options
   */
  endpoint_options: {};
  /**
   * the name of the variable in local scope to save the data under
   */
  name?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-io-object-storage".
 */
export interface ObjectStorageIoSchema {
  objectData: ObjectStorageContainerData;
  /**
   * if a file with the same filename already exists, whether to overwrite the old file
   */
  overwrite?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reusable-object-storage-container-data".
 */
export interface ObjectStorageContainerData {
  /**
   * Object storage container for the file
   */
  CONTAINER: string;
  /**
   * Name of the file inside the object storage bucket
   */
  NAME: string;
  /**
   * Object storage provider
   */
  PROVIDER: string;
  /**
   * Region for the object container specified in Container
   */
  REGION: string;
  /**
   * Size of the file in bytes
   */
  SIZE?: number;
  /**
   * Unix timestamp showing when the file was last modified
   */
  TIMESTAMP?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-map-properties".
 */
export interface WorkflowUnitMapProperties {
  type?: "map";
  /**
   * Id of workflow to run inside map
   */
  workflowId?: string;
  /**
   * Input information for map.
   */
  input?: {
    /**
     * Name of the target variable to substitute using the values below. e.g. K_POINTS
     */
    target: string;
    /**
     * Scope to retrieve `values` from, global or flowchartId. Optional if `values` is given.
     */
    scope?: string;
    /**
     * Name of the variable inside the scope to retrieve `values` from. Optional if `values` is given.
     */
    name?: string;
    /**
     * Sequence of values for the target Jinja variable. Optional if `scope` and `name` are given. This can be used for map-reduce type parallel execution
     */
    values?: (string | number | {})[];
    useValues?: boolean;
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-reduce-properties".
 */
export interface WorkflowUnitReduceProperties {
  type?: "reduce";
  /**
   * corresponding map unit flowchart ID
   */
  mapFlowchartId?: string;
  /**
   * input information for reduce unit
   */
  input?: {
    /**
     * reduce operation, e.g. aggregate
     */
    operation: string;
    /**
     * arguments which are passed to reduce operation function
     */
    arguments: string[];
  }[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-condition-properties".
 */
export interface WorkflowUnitConditionProperties {
  type?: "condition";
  /**
   * Input information for condition.
   */
  input?: WorkflowUnitInputSchema[];
  /**
   * Condition statement. e.g. 'abs(x-total_energy) < 1e-5'
   */
  statement?: string;
  /**
   * Flowchart ID reference for `then` part of the condition.
   */
  then?: string;
  /**
   * Flowchart ID reference for `else` part of the condition.
   */
  else?: string;
  /**
   * Maximum occurrence of the condition, usable for loops.
   */
  maxOccurrences?: number;
  /**
   * Throw exception on reaching to maximum occurence.
   */
  throwException?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-input--inputItemScope".
 */
export interface WorkflowUnitInputSchema {
  /**
   * Scope of the variable. e.g. 'global' or 'flowchart_id_2'
   */
  scope: string;
  /**
   * Name of the input data. e.g. total_energy
   */
  name: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-assertion-properties".
 */
export interface WorkflowUnitAssertionProperties {
  type?: "assertion";
  statement?: string;
  errorMessage?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-execution-properties".
 */
export interface WorkflowUnitExecutionProperties {
  type?: "execution";
  application?: ApplicationSchemaBase;
  executable?: ExecutableSchema;
  flavor?: FlavorSchema;
  /**
   * unit input (type to be specified by the application's execution unit)
   */
  input?: {
    [k: string]: unknown;
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-executable-properties".
 */
export interface SoftwareExecutableProperties {
  /**
   * The name of the executable. e.g. pw.x
   */
  name?: string;
  /**
   * _ids of the application this executable belongs to
   */
  applicationId?: string[];
  /**
   * Whether advanced compute options are present
   */
  hasAdvancedComputeOptions?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-flavor-properties".
 */
export interface SoftwareFlavorProperties {
  /**
   * The name of the executable flavor. e.g. `pw_scf`
   */
  name?: string;
  /**
   * _id of the executable this flavor belongs to
   */
  executableId?: string;
  /**
   * name of the executable this flavor belongs to
   */
  executableName?: string;
  /**
   * name of the application this flavor belongs to
   */
  applicationName?: string;
  input?: ExecutionUnitInputSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-input--inputItemId".
 */
export interface ExecutionUnitInputIdItemSchemaForPhysicsBasedSimulationEngines {
  templateId: string;
  templateName?: string;
  /**
   * name of the resulting input file, if different than template name
   */
  name?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-assignment-properties".
 */
export interface WorkflowUnitAssignmentProperties {
  type?: "assignment";
  /**
   * Input information for assignment. if omitted, means that it is an initialization unit, otherwise it is an assignment.
   */
  input?: WorkflowUnitInputSchema[];
  /**
   * Name of the global variable. e.g. 'x'
   */
  operand?: string;
  /**
   * Value of the variable. The value content could be a simple integer, string or a python expression. e.g. '0' (initialization), 'sin(x)+1' (expression)
   */
  value?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-processing-properties".
 */
export interface WorkflowUnitProcessingProperties {
  type?: "processing";
  /**
   * Contains information about the operation used.
   */
  operation?: string;
  /**
   * Contains information about the specific type of the operation used.
   */
  operationType?: string;
  /**
   * unit input (type to be specified by the child units)
   */
  inputData?: {
    [k: string]: unknown;
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "material-properties".
 */
export interface MaterialProperties {
  /**
   * reduced chemical formula
   */
  formula?: string;
  /**
   * chemical formula based on the number of atoms of each element in the supercell
   */
  unitCellFormula?: string;
  basis?: BasisSchema;
  lattice?: LatticeSchema;
  derivedProperties?: DerivedPropertiesSchema;
  external?: DatabaseSourceSchema;
  src?: FileSourceSchema;
  /**
   * Hash string for a scaled structure with lattice vector a set to 1 (eg. for materials under pressure).
   */
  scaledHash?: string;
  /**
   * Corresponding ICSD id of the material
   */
  icsdId?: number;
  /**
   * Whether to work in the finite molecular picture (usually with atomic orbital basis)
   */
  isNonPeriodic?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-basis".
 */
export interface BasisSchema {
  elements: AtomicElements[];
  coordinates: AtomicCoordinate[];
  name?: string;
  units?: string;
  bonds?: BondsSchema;
}
/**
 * elements of atoms by ids, string, unitless
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-basis-atomic-element".
 */
export interface AtomicElements {
  id: number;
  value: string;
  /**
   * Occurrence is for fractional occupations
   */
  occurrence?: number;
  oxidationState?: number;
}
/**
 * coordinates of atoms by ids, vector, unitless
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-basis-atomic-coordinate".
 */
export interface AtomicCoordinate {
  id?: number;
  value?: VectorSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-abstract--d-vector-basis".
 */
export interface DimensionalVectorBasis {
  a: ArrayOf3NumberElementsSchema3;
  b: ArrayOf3NumberElementsSchema4;
  c: ArrayOf3NumberElementsSchema5;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-lattice-lattice-vectors-properties".
 */
export interface PropertiesDirectoryStructuralLatticeLatticeVectorsProperties {
  /**
   * lattice parameter for fractional coordinates
   */
  alat?: number;
  units?: "km" | "m" | "pm" | "nm" | "angstrom" | "a.u." | "bohr" | "fractional" | "crystal" | "cartesian" | "alat";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive--d-lattice".
 */
export interface DimensionalLatticeSchema {
  /**
   * length of the first lattice vector
   */
  a: number;
  /**
   * length of the second lattice vector
   */
  b: number;
  /**
   * length of the third lattice vector
   */
  c: number;
  /**
   * angle between first and second lattice vector
   */
  alpha: number;
  /**
   * angle between second and third lattice vector
   */
  beta: number;
  /**
   * angle between first and third lattice vector
   */
  gamma: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-lattice-lattice-bravais-properties".
 */
export interface PropertiesDirectoryStructuralLatticeLatticeBravaisProperties {
  /**
   * Bravais lattice type in short notation
   */
  type?:
    | "CUB"
    | "BCC"
    | "FCC"
    | "TET"
    | "MCL"
    | "ORC"
    | "ORCC"
    | "ORCF"
    | "ORCI"
    | "HEX"
    | "BCT"
    | "TRI"
    | "MCLC"
    | "RHL";
  units?: {
    length?: "angstrom" | "bohr";
    angle?: "degree" | "radian";
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-lattice-properties".
 */
export interface PropertiesDirectoryStructuralLatticeProperties {
  name?: "lattice";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-volume-properties".
 */
export interface PropertiesDirectoryStructuralVolumeProperties {
  name?: "volume";
  units?: "angstrom^3";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-density-properties".
 */
export interface PropertiesDirectoryStructuralDensityProperties {
  name?: "density";
  units?: "g/cm^3";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-symmetry".
 */
export interface SymmetrySchema {
  /**
   * point group symbol in Schoenflies notation
   */
  pointGroupSymbol?: string;
  /**
   * space group symbol in Hermann–Mauguin notation
   */
  spaceGroupSymbol?: string;
  /**
   * tolerance used for symmetry calculation
   */
  tolerance?: ScalarSchema;
  name?: "symmetry";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-elemental-ratio-properties".
 */
export interface PropertiesDirectoryStructuralElementalRatioProperties {
  name?: "elemental_ratio";
  value?: number;
  /**
   * the element this ratio is for
   */
  element?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-p-norm-properties".
 */
export interface PropertiesDirectoryStructuralPNormProperties {
  name?: "p-norm";
  /**
   * degree of the dimensionality of the norm
   */
  degree?: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-string".
 */
export interface PrimitiveString {
  value: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-inchi-properties".
 */
export interface PropertiesDirectoryStructuralInchiProperties {
  name?: "inchi";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-inchi-key-properties".
 */
export interface PropertiesDirectoryStructuralInchiKeyProperties {
  name?: "inchi_key";
}
/**
 * information about a database source
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-database-source".
 */
export interface DatabaseSourceSchema {
  /**
   * ID string for the materials uploaded from a third party source inside the third party source. For materialsproject.org an example ID is mp-32
   */
  id: string;
  /**
   * Third party source name.
   */
  source: string;
  /**
   * A flag that is true when material is initially imported from a third party * (as opposed to being independently designed from scratch).
   */
  origin: boolean;
  /**
   * Original response from external source
   */
  data?: {};
}
/**
 * file source with the information inside
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-file-source".
 */
export interface FileSourceSchema {
  /**
   * file extension
   */
  extension?: string;
  /**
   * file name without extension
   */
  filename: string;
  /**
   * file content as raw text
   */
  text: string;
  /**
   * MD5 hash based on file content
   */
  hash: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "new-model".
 */
export interface NewModelSchemaBase {
  tier1: SlugifiedEntryOrSlug;
  tier2: SlugifiedEntryOrSlug;
  tier3: SlugifiedEntryOrSlug;
  type: SlugifiedEntryOrSlug;
  subtype?: SlugifiedEntryOrSlug;
  method: MethodSchemaBase;
  reference?: LiteratureReferenceSchema;
  augmentations?: ModelAugmentationSchema;
  modifiers?: ModelModificationsSchema;
  tags?: ModelTagsSchema;
}
/**
 * container for machine- and human-readable identifier
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-slugified-entry".
 */
export interface SlugifiedEntry {
  /**
   * descriptive human-readable name of entry
   */
  name: string;
  /**
   * machine-readable identifier
   */
  slug: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference-literature".
 */
export interface LiteratureReferenceSchema {
  type?: "literature";
  /**
   * Digital Object Identifier of the reference.
   */
  doi?: string;
  /**
   * International Standard Book Number of the reference.
   */
  isbn?: string;
  /**
   * International Standard Serial Number of the reference.
   */
  issn?: string;
  /**
   * Internet address of the reference.
   */
  url?: string;
  /**
   * Title of the work.
   */
  title?: string;
  /**
   * Publisher of the work.
   */
  publisher?: string;
  /**
   * Journal in which the work appeared.
   */
  journal?: string;
  /**
   * Volume of the series in which the work appeared.
   */
  volume?: string;
  /**
   * Year in which the reference was published.
   */
  year?: string;
  /**
   * Issue of the collection in which the work appeared.
   */
  issue?: string;
  /**
   * Start and end pages of the work.
   */
  pages?: PagesSchema;
  /**
   * List of authors of the work.
   */
  authors?: ExperimentAuthorSchema[];
  /**
   * List of editors of the work.
   */
  editors?: ExperimentAuthorSchema[];
  /**
   * References cited by the work. Reference objects can nest as deeply as needed. This is useful, for example, when tracking the history of a value referenced in a scholarly article; the top level reference would contain information about where the data was accessed while the nested reference would contain information about where it was originally published.
   */
  reference?: {}[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference-literature-pages".
 */
export interface PagesSchema {
  start: string;
  end?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference-literature-name".
 */
export interface ExperimentAuthorSchema {
  first: string;
  middle?: string;
  last: string;
  affiliation?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "project-properties".
 */
export interface ProjectProperties {
  /**
   * project GID
   */
  gid?: number;
  /**
   * charge rates info for project
   */
  clusterBasedChargeRates?: {
    rate?: number;
    timestamp?: number;
    hostname?: string;
  }[];
  isExternal?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference-modeling-exabyte".
 */
export interface InfoForCharacteristicObtainedByExabyteCalculation {
  type?: "exabyte";
  /**
   * Human-readable title of the job
   */
  title: string;
  /**
   * job identifier
   */
  _id: string;
  owner: EntityReferenceSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference-experiment".
 */
export interface InfoForCharacteristicObtainedByExperiment {
  type?: "experiment";
  /**
   * experiment authors
   */
  authors: ExperimentAuthorSchema[];
  /**
   * experiment title
   */
  title: string;
  /**
   * method used in experiment
   */
  method: string;
  conditions: ConditionSchema[];
  location?: LocationSchema;
  /**
   * epoch time.
   */
  timestamp: number;
  /**
   * Note about experiment
   */
  note?: string;
  /**
   * references to literature articles
   */
  references?: LiteratureReferenceSchema[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference-experiment-condition".
 */
export interface ConditionSchema {
  /**
   * condition unit
   */
  units?: string;
  /**
   * array of condition values
   */
  scalar?: {
    value?: string;
  }[];
  /**
   * human-readable name of the condition
   */
  name: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference-experiment-location".
 */
export interface LocationSchema {
  /**
   * location latitude
   */
  latitude: number;
  /**
   * location longitude
   */
  longitude: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-abstract--d-data".
 */
export interface DimensionDataSchema {
  /**
   * array containing values of x Axis
   */
  xDataArray: unknown[];
  yDataSeries: DimensionDataSeriesSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-abstract--d-plot-properties".
 */
export interface CoreAbstractDPlotProperties {
  xAxis?: AxisSchema;
  yAxis?: AxisSchema;
  /**
   * Legend of y Axis data series
   *
   * @minItems 1
   */
  legend?: [unknown, ...unknown[]];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-primitive-axis".
 */
export interface AxisSchema {
  /**
   * label of an axis object
   */
  label: string;
  /**
   * units for an axis
   */
  units?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-abstract--d-grid".
 */
export interface DimensionalGridSchema {
  dimensions: ArrayOf3NumberElementsSchema6;
  shifts: ArrayOf3NumberElementsSchema7;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reference-exabyte".
 */
export interface CoreReferenceExabyte {
  /**
   * Material's identity. Used for protoProperties.
   */
  materialId?: string;
  /**
   * Job's identity
   */
  jobId?: string;
  /**
   * Id of the unit that extracted the result
   */
  unitId?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reusable-band-gap-properties".
 */
export interface CoreReusableBandGapProperties {
  kpointConduction?: PointSchema;
  kpointValence?: PointSchema;
  /**
   * eigenvalue at k-point in conduction band
   */
  eigenvalueConduction?: number;
  /**
   * eigenvalue at k-point in valence band
   */
  eigenvalueValence?: number;
  spin?: number;
  type?: "direct" | "indirect";
  units?: "kJ/mol" | "eV" | "J/mol" | "hartree" | "cm-1" | "rydberg" | "eV/atom";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reusable-energy-properties".
 */
export interface CoreReusableEnergyProperties {
  name?: string;
  units?: ("kJ/mol" | "eV" | "J/mol" | "hartree" | "cm-1" | "rydberg" | "eV/atom") | "eV/A^2";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "core-reusable-file-metadata".
 */
export interface FileMetadata {
  /**
   * Relative path to the directory that contains the file.
   */
  pathname?: string;
  /**
   * Basename of the file
   */
  basename?: string;
  /**
   * What kind of file this is, e.g. image / text
   */
  filetype?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "definitions-units".
 */
export interface DefinitionsUnits {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "material-conventional".
 */
export interface MaterialConventionalSchema {
  conventional?: {};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-local-orbital-properties".
 */
export interface MethodsDirectoryLocalOrbitalProperties {
  type?: "local-orbital";
  subtype?: "pople" | "dunning";
  basisSet?: {
    [k: string]: unknown;
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-pseudopotential-properties".
 */
export interface MethodsDirectoryPseudopotentialProperties {
  type?: "pseudopotential";
  subtype?: "us" | "nc" | "paw";
  precision?: PrecisionSchemaForPseudopotentialDft;
  data?: {
    dateSet?: PseudopotentialDatasetSchema;
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-pseudopotential-precision".
 */
export interface PrecisionSchemaForPseudopotentialDft {
  /**
   * wavefunction cutoff energy in eV
   */
  ecutwfc: number;
  /**
   * charge density cutoff energy in eV
   */
  ecutrho: number;
  /**
   * information about kpoints grid
   */
  kgrid: DimensionalGridSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-pseudopotential-dataset".
 */
export interface PseudopotentialDatasetSchema {
  /**
   * simulation engines that can use this pseudopotential set items
   */
  apps: unknown[];
  /**
   * chemical elements for which files are present in the set
   */
  elements: string[];
  exchangeCorrelation: ExchangeCorrelationSchema;
  /**
   * type of pseudopotantial format
   */
  format: "upf" | "vasp";
  name: string;
  /**
   * explains the source of where this came from
   */
  source?: "quantum espresso database" | "gbrv" | "vasp database" | "other";
  /**
   * type of pseudization
   */
  type: "paw" | "us" | "nc";
  /**
   * explains the version of where this came from
   */
  version?: string;
  /**
   * pseudopotentials used inside this set
   */
  files: PseudopotentialFileSchema[];
}
/**
 * details on the type of formalism used
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-pseudopotential-file-exchange-correlation".
 */
export interface ExchangeCorrelationSchema {
  approximation?: "lda" | "gga";
  functional?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-pseudopotential-file".
 */
export interface PseudopotentialFileSchema {
  /**
   * chemical element
   */
  element: string;
  /**
   * text of pseudopotential file header
   */
  textHeading?: string;
  /**
   * type of pseudization
   */
  type: "paw" | "us" | "nc";
  title?: string;
  generationDate?: string;
  /**
   * explains where this came from
   */
  source: string;
  /**
   * explains the version of where this came from
   */
  version?: string;
  valenceElectrons?: number;
  coreStates?: "all" | "none" | "partial";
  energyCutoff?: EnergyCutoffSchema;
  electronicConfiguration?: string;
  exchangeCorrelation: ExchangeCorrelationSchema;
  /**
   * atomic mass in amu
   */
  mass?: number;
  radii?: RadiiSchema;
  screening?: "linear" | "non_linear" | "none";
  /**
   * array of characteristic properties
   */
  properties?: unknown[];
  /**
   * location of the pseudopotential file on filesystem
   */
  path: string;
  /**
   * simulation engines that can use this pseudopotential
   */
  apps: unknown[];
  storage?: {
    /**
     * pseudopotential file path on a cloud storage
     */
    url?: string;
    /**
     * container name where pseudo file is uploaded
     */
    container?: string;
    /**
     * cloud storage provider where pseudo file is stored
     */
    provider?: "ec2" | "azure";
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-pseudopotential-file-energy-cutoff".
 */
export interface EnergyCutoffSchema {
  /**
   * highest energy of plane waves included in calculation
   */
  energyCutoff?: {
    max?: number;
    min?: number;
    units?: "eV" | "rydberg" | "hartree";
  };
}
/**
 * cutoff and atomic radii of the elemental pseudopotential
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-pseudopotential-file-radii".
 */
export interface RadiiSchema {
  wignerSeitz?: number;
  partialCore?: number;
  cutoff?: number;
  units?: "angstrom" | "bohr" | "nm";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-regression-properties".
 */
export interface MethodsDirectoryRegressionProperties {
  type?: "linear" | "kernel_ridge";
  subtype?: "least_squares" | "ridge";
  precision?: {
    [k: string]: unknown;
  };
  data?: {
    [k: string]: unknown;
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-unknown-properties".
 */
export interface MethodsDirectoryUnknownProperties {
  type?: "unknown";
  subtype?: "unknown";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-local-orbital-definitions-basis-sets".
 */
export interface MethodsDirectoryLocalOrbitalDefinitionsBasisSets {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-regression-linear-data-per-property".
 */
export interface LinearRegressionParametersSchema {
  /**
   * intercept (shift) from the linear or non-linear fit of data points
   */
  intercept: number;
  /**
   * per-feature (property used for training the ML method/model) parameters
   */
  perFeature: FeatureParametersSchema[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-regression-data-per-feature".
 */
export interface FeatureParametersSchema {
  /**
   * feature name
   */
  name: string;
  /**
   * pvalue: https://en.wikipedia.org/wiki/P-value
   */
  importance?: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-regression-kernel-ridge-data-per-property".
 */
export interface KernelRidgeRegressionParametersSchema {
  /**
   * training data
   */
  xFit: unknown[];
  /**
   * dual coefficients
   */
  dualCoefficients: unknown[];
  /**
   * per-feature (property used for training the ML method/model) parameters
   */
  perFeature: FeatureParametersSchema[];
}
/**
 * dataset for ml
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-regression-dataset".
 */
export interface MethodsDirectoryRegressionDataset {
  /**
   * array of exabyteIds for materials in dataset
   */
  exabyteIds: string[];
  /**
   * holder for any extra information, eg. coming from user-uploaded CSV file
   */
  extra?: {
    [k: string]: unknown;
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "methods-directory-regression-precision-per-property".
 */
export interface PrecisionSchemaForRegression {
  /**
   * training error of the estimator
   */
  trainingError: number;
  /**
   * prediction score of the estimator. Eg: r2_score
   */
  score?: number;
}
/**
 * Universal attributes applicable to most models
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-definitions".
 */
export interface ModelsDirectoryDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-properties".
 */
export interface ModelsDirectoryPbProperties {
  tier1?: {name: "physics-based"; slug: "pb"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-st-properties".
 */
export interface ModelsDirectoryStProperties {
  tier1?: {name: "statistical"; slug: "st"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-unknown-properties".
 */
export interface ModelsDirectoryUnknownProperties {
  type?: "unknown";
  subtype?: "unknown";
  method?: UnknownMethodsSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-properties".
 */
export interface ModelsDirectoryPbQmProperties {
  tier2?: {name: "quantum-mechanical"; slug: "qm"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-abin-properties".
 */
export interface ModelsDirectoryPbQmAbinProperties {
  tier3?: {name: "ab-initio"; slug: "abin"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-definitions".
 */
export interface ModelsDirectoryPbQmDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-properties".
 */
export interface ModelsDirectoryPbQmDftProperties {
  tier3?: {name: "density functional theory"; slug: "dft"};
  functional?: ExchangeCorrelationFunctionalBaseSchema;
  dispersionModel?: GeneralizedDFTDispersionModel;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-properties".
 */
export interface ModelsDirectoryPbQmDftFunctionalProperties {
  components?: FunctionalComponentSchema[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-component-properties".
 */
export interface ModelsDirectoryPbQmDftFunctionalComponentProperties {
  /**
   * type of functional, e.g. exchange functional
   */
  type?: string;
  /**
   * Contribution of component to final functional object
   */
  fraction?: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-model".
 */
export interface GeneralizedDFTDispersionModel {
  /**
   * Specifies the theoretical approach
   */
  modelType: "ab initio" | "empirical";
  /**
   * Specifies where dispersion model is applied
   */
  usage: "intra-scf" | "post-scf";
  type: SlugifiedEntry;
  subtype?: SlugifiedEntry;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-semp-properties".
 */
export interface ModelsDirectoryPbQmSempProperties {
  tier3?: {name: "semi-empirical"; slug: "semp"};
  type?:
    | {name: "extended hueckel theory"; slug: "eht"}
    | {name: "parametric method 7"; slug: "pm7"}
    | {name: "first order tight-binding dft"; slug: "dftb1"}
    | {name: "second order tight-binding dft"; slug: "dftb2"}
    | {name: "third order tight-binding dft"; slug: "dftb3"};
  augmentations?: ModelsDirectoryPbQmSempAugmentations;
  modifiers?: ModelsDirectoryPbQmSempModifiers;
  tags?: ModelsDirectoryPbQmSempTags;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-abin-configuration-interaction-properties".
 */
export interface ModelsDirectoryPbQmAbinConfigurationInteractionProperties {
  type?: {name: "configuration interaction"; slug: "ci"};
  subtype?:
    | {name: "CIS"; slug: "cis"}
    | {name: "CISD"; slug: "cisd"}
    | {name: "MR-CIS"; slug: "mrcis"}
    | {name: "MR-CISD"; slug: "mrcisd"};
  augmentations?: ModelsDirectoryPbQmAbinConfigurationInteractionAugmentations;
  modifiers?: ModelsDirectoryPbQmAbinConfigurationInteractionModifiers;
  tags?: ModelsDirectoryPbQmAbinConfigurationInteractionTags;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-abin-definitions".
 */
export interface ModelsDirectoryPbQmAbinDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-abin-configuration-interaction-definitions".
 */
export interface ModelsDirectoryPbQmAbinConfigurationInteractionDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dft-unit-functionals".
 */
export interface ModelsDirectoryPbQmDftDftUnitFunctionals {
  [k: string]: unknown;
}
/**
 * Used to generate dft_unit_functionals.json
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dft-unit-functionals-proto".
 */
export interface ModelsDirectoryPbQmDftDftUnitFunctionalsProto {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-properties".
 */
export interface ModelsDirectoryPbQmDftKsdftProperties {
  type?: {name: "Kohn-Sham DFT"; slug: "ksdft"};
  augmentations?: ModelsDirectoryPbQmDftKsdftAugmentations;
  modifiers?: ModelsDirectoryPbQmDftKsdftModifiers;
  tags?: ModelsDirectoryPbQmDftKsdftTags;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-generalized-post-empirical-properties".
 */
export interface ModelsDirectoryPbQmDftDispersionModelsDirectoryGeneralizedPostEmpiricalProperties {
  modelType?: "empirical";
  usage?: "post-scf";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-dft-d-properties".
 */
export interface ModelsDirectoryPbQmDftDispersionModelsDirectoryDftDProperties {
  type?: {name: "Empirical dispersion DFT-D"; slug: "empirical-dft-d"};
  subtype?:
    | {name: "DFT-D2"; slug: "dft-d2"}
    | {name: "DFT-CHG"; slug: "dft-chg"}
    | {name: "DFT-D3(0)"; slug: "dft-d3-0"}
    | {name: "DFT-D3(BJ)"; slug: "dft-d3-bj"}
    | {name: "DFT-D3(CSO)"; slug: "dft-d3-cso"}
    | {name: "DFT-D3M(BJ)"; slug: "dft-d3-bj-m"}
    | {name: "DFT-D3(op)"; slug: "dft-d3-op"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-exchange-dipole-properties".
 */
export interface ModelsDirectoryPbQmDftDispersionModelsDirectoryExchangeDipoleProperties {
  type?: {name: "Exchange-Dipole Model (XDM)"; slug: "exchange-dipole-model"};
  subtype?: {name: "XDM6"; slug: "xdm6"} | {name: "XDM10"; slug: "xdm10"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-generalized-post-abin-properties".
 */
export interface ModelsDirectoryPbQmDftDispersionModelsDirectoryGeneralizedPostAbinProperties {
  modelType?: "ab initio";
  usage?: "post-scf";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-many-body-dispersion-properties".
 */
export interface ModelsDirectoryPbQmDftDispersionModelsDirectoryManyBodyDispersionProperties {
  type?: {name: "Many-body dispersion correction"; slug: "many-body-disp"};
  subtype?: {name: "MBD@rsSCS (range-separated self-consistent screening)"; slug: "mbd-rsscs"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-generalized-intra-abin-properties".
 */
export interface ModelsDirectoryPbQmDftDispersionModelsDirectoryGeneralizedIntraAbinProperties {
  modelType?: "ab initio";
  usage?: "intra-scf";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-non-local-correlation-properties".
 */
export interface ModelsDirectoryPbQmDftDispersionModelsDirectoryNonLocalCorrelationProperties {
  type?: {name: "Non-Local Correlation (NLC) Functionals"; slug: "nlc"};
  subtype?: {name: "VV10"; slug: "vv10"} | {name: "rVV10"; slug: "rvv10"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-tkatchenko-scheffler-properties".
 */
export interface ModelsDirectoryPbQmDftDispersionModelsDirectoryTkatchenkoSchefflerProperties {
  type?: {name: "Tkatchenko-Scheffler van der Waals Model (TS-vdW)"; slug: "ts-vdw"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-dispersion-models-directory-generalized-intra-empirical-properties".
 */
export interface ModelsDirectoryPbQmDftDispersionModelsDirectoryGeneralizedIntraEmpiricalProperties {
  modelType?: "empirical";
  usage?: "intra-scf";
}
/**
 * Names of final functional objects, i.e. the ones used in calculations
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-definitions".
 */
export interface ModelsDirectoryPbQmDftFunctionalDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-local-functional-properties".
 */
export interface ModelsDirectoryPbQmDftFunctionalComponentsDirectoryLocalFunctionalProperties {
  type?: "exchange" | "correlation" | "exchange-correlation" | "kinetic";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-exact-exchange-properties".
 */
export interface ModelsDirectoryPbQmDftFunctionalComponentsDirectoryExactExchangeProperties {
  name?: "exact Exchange";
  slug?: "exact-exchange";
  type?: "exchange";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-mp--correlation-properties".
 */
export interface ModelsDirectoryPbQmDftFunctionalComponentsDirectoryMpCorrelationProperties {
  name?: "mp2-correction";
  slug?: "mp2";
  type?: "correlation";
  /**
   * Indicates whether the entire MP2 correlation energy is used or one of its spin components
   */
  subtype?: "all-spin" | "same-spin" | "opposite-spin";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-functional-components-directory-range-separated-exchange-properties".
 */
export interface ModelsDirectoryPbQmDftFunctionalComponentsDirectoryRangeSeparatedExchangeProperties {
  type?: "exchange";
  range?: "short-range" | "long-range";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-definitions".
 */
export interface ModelsDirectoryPbQmDftKsdftDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-double-hybrid-definitions".
 */
export interface ModelsDirectoryPbQmDftKsdftDoubleHybridDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-double-hybrid-functional-properties".
 */
export interface ModelsDirectoryPbQmDftKsdftDoubleHybridFunctionalProperties {
  components?: (
    | ExactExchangeComponentSchema
    | SecondOrderMollerPlessetMP2CorrelationCorrectionSchema
    | ModelsDirectoryPbQmDftFunctionalLocalFunctionalComponents
  )[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-double-hybrid-range-separated-functional-properties".
 */
export interface ModelsDirectoryPbQmDftKsdftDoubleHybridRangeSeparatedFunctionalProperties {
  /**
   * attenuation parameter, usually denoted as omega or mu
   */
  attenuation?: number;
  components?: (
    | (RangeSeparatedExchangeSchema & ModelsDirectoryPbQmDftFunctionalLocalFunctionalComponents)
    | (RangeSeparatedExchangeSchema & ExactExchangeComponentSchema)
    | ModelsDirectoryPbQmDftFunctionalLocalFunctionalComponents
    | SecondOrderMollerPlessetMP2CorrelationCorrectionSchema
  )[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-gga-definitions".
 */
export interface ModelsDirectoryPbQmDftKsdftGgaDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-gga-functional-properties".
 */
export interface ModelsDirectoryPbQmDftKsdftGgaFunctionalProperties {
  components?: LocalFunctionalGga[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-hybrid-definitions".
 */
export interface ModelsDirectoryPbQmDftKsdftHybridDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-hybrid-functional-properties".
 */
export interface ModelsDirectoryPbQmDftKsdftHybridFunctionalProperties {
  components?: (ExactExchangeComponentSchema | ModelsDirectoryPbQmDftFunctionalLocalFunctionalComponents)[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-hybrid-range-separated-functional-properties".
 */
export interface ModelsDirectoryPbQmDftKsdftHybridRangeSeparatedFunctionalProperties {
  /**
   * attenuation parameter, usually denoted as omega or mu
   */
  attenuation?: number;
  components?: (
    | (RangeSeparatedExchangeSchema & ModelsDirectoryPbQmDftFunctionalLocalFunctionalComponents)
    | (RangeSeparatedExchangeSchema & ExactExchangeComponentSchema)
    | ModelsDirectoryPbQmDftFunctionalLocalFunctionalComponents
  )[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-lda-definitions".
 */
export interface ModelsDirectoryPbQmDftKsdftLdaDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-lda-functional-properties".
 */
export interface ModelsDirectoryPbQmDftKsdftLdaFunctionalProperties {
  components?: LocalFunctionalLdaComponentSchema[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-mgga-definitions".
 */
export interface ModelsDirectoryPbQmDftKsdftMggaDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-dft-ksdft-mgga-functional-properties".
 */
export interface ModelsDirectoryPbQmDftKsdftMggaFunctionalProperties {
  components?: LocalFunctionalMggaComponentSchema[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-pb-qm-semp-definitions".
 */
export interface ModelsDirectoryPbQmSempDefinitions {
  [k: string]: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-st-det-properties".
 */
export interface ModelsDirectoryStDetProperties {
  tier2?: {name: "deterministic"; slug: "det"};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "models-directory-st-det-ml-properties".
 */
export interface ModelsDirectoryStDetMlProperties {
  tier3?: {name: "machine learning"; slug: "ml"};
  type?: {name: "regression"; slug: "re"};
  method?: LinearMethodsSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-electronic-configuration".
 */
export interface ElectronicConfigurationSchema {
  /**
   * total charge of the molecular system
   */
  charge?: number;
  /**
   * calculated as 2S+1, with S is the total spin angular momentum
   */
  multiplicity?: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-average-potential-profile-properties".
 */
export interface PropertiesDirectoryNonScalarAveragePotentialProfileProperties {
  xAxis?: {
    label?: "z coordinate";
    units?: "km" | "m" | "pm" | "nm" | "angstrom" | "a.u." | "bohr" | "fractional" | "crystal" | "cartesian" | "alat";
  };
  yAxis?: {
    label?: "energy";
    units?: "kJ/mol" | "eV" | "J/mol" | "hartree" | "cm-1" | "rydberg" | "eV/atom";
  };
  name?: "average_potential_profile";
}
/**
 * contains band gap values
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-band-gaps".
 */
export interface BandGapsSchema {
  name: "band_gaps";
  values?: BandGapSchema[];
  eigenvalues?: {
    kpoint?: PointSchema;
    weight?: number;
    eigenvalues?: {
      spin?: number;
      energies?: unknown[];
      occupations?: unknown[];
    }[];
  }[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-band-structure-properties".
 */
export interface PropertiesDirectoryNonScalarBandStructureProperties {
  xAxis?: {
    label?: "kpoints";
    units?: "km" | "m" | "pm" | "nm" | "angstrom" | "a.u." | "bohr" | "fractional" | "crystal" | "cartesian" | "alat";
  };
  yAxis?: {
    label?: "energy";
    units?: "kJ/mol" | "eV" | "J/mol" | "hartree" | "cm-1" | "rydberg" | "eV/atom";
  };
  name?: "band_structure";
  /**
   * spin of each band
   */
  spin?: (0.5 | -0.5)[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-charge-density-profile-properties".
 */
export interface PropertiesDirectoryNonScalarChargeDensityProfileProperties {
  xAxis?: {
    label?: "z coordinate";
  };
  yAxis?: {
    label?: "charge density";
    units?: "e/A";
  };
  name?: "charge_density_profile";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-density-of-states-properties".
 */
export interface PropertiesDirectoryNonScalarDensityOfStatesProperties {
  xAxis?: {
    label?: "energy";
    units?: "kJ/mol" | "eV" | "J/mol" | "hartree" | "cm-1" | "rydberg" | "eV/atom";
  };
  yAxis?: {
    label?: "density of states";
    units?: "states/unitcell";
  };
  name?: "density_of_states";
  legend?: {
    /**
     * chemical element
     */
    element?: string;
    /**
     * index inside sub-array of atoms of the same element type
     */
    index?: number;
    /**
     * electronic character and shell of PDOS, such as `1s` or `s`, or `total`
     */
    electronicState?: string;
    /**
     * spin of the electronic state
     */
    spin?: 0.5 | -0.5;
  }[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-file-content-properties".
 */
export interface PropertiesDirectoryNonScalarFileContentProperties {
  name?: "file_content";
  /**
   * What kind of file this is, e.g. image / text
   */
  filetype?: "image" | "text" | "csv";
  objectData?: ObjectStorageContainerData;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-phonon-dispersions-properties".
 */
export interface PropertiesDirectoryNonScalarPhononDispersionsProperties {
  xAxis?: {
    label?: "qpoints";
    units?: "km" | "m" | "pm" | "nm" | "angstrom" | "a.u." | "bohr" | "fractional" | "crystal" | "cartesian" | "alat";
  };
  yAxis?: {
    label?: "frequency";
    units?: "cm-1" | "THz" | "meV";
  };
  name?: "phonon_dispersions";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-phonon-dos-properties".
 */
export interface PropertiesDirectoryNonScalarPhononDosProperties {
  xAxis?: {
    label?: "frequency";
    units?: "cm-1" | "THz" | "meV";
  };
  yAxis?: {
    label?: "Phonon DOS";
    units?: "states/cm-1" | "states/THz" | "states/meV";
  };
  name?: "phonon_dos";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-potential-profile-properties".
 */
export interface PropertiesDirectoryNonScalarPotentialProfileProperties {
  xAxis?: {
    label?: "z coordinate";
  };
  yAxis?: {
    label?: "energy";
    units?: "kJ/mol" | "eV" | "J/mol" | "hartree" | "cm-1" | "rydberg" | "eV/atom";
  };
  name?: "potential_profile";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-reaction-energy-profile-properties".
 */
export interface PropertiesDirectoryNonScalarReactionEnergyProfileProperties {
  xAxis?: {
    label?: "reaction coordinate";
  };
  yAxis?: {
    label?: "energy";
    units?: "kJ/mol" | "eV" | "J/mol" | "hartree" | "cm-1" | "rydberg" | "eV/atom";
  };
  name?: "reaction_energy_profile";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-stress-tensor".
 */
export interface StressTensorSchema {
  value?: DimensionalTensorSchema;
  name?: "stress_tensor";
  units?: "kbar" | "pa";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-total-energy-contributions".
 */
export interface TotalEnergyContributionsSchema {
  /**
   * product of temperature and configurational entropy
   */
  temperatureEntropy?: ScalarSchema;
  /**
   * non self-consitent energy based on an input charge density
   */
  harrisFoulkes?: ScalarSchema;
  /**
   * kinetic + pseudopotential energy
   */
  oneElectron?: ScalarSchema;
  /**
   * energy due to coulomb potential
   */
  hartree?: ScalarSchema;
  /**
   * exchange energy
   */
  exchange?: ScalarSchema;
  /**
   * exchange and correlation energy per particle
   */
  exchangeCorrelation?: ScalarSchema;
  /**
   * summation of interaction energies at long length scales due to coloumbic interactions
   */
  ewald?: ScalarSchema;
  /**
   * divergent electrostatic ion interaction in compensating electron gas
   */
  alphaZ?: ScalarSchema;
  /**
   * kinetic energy of wavefunctions in the atomic limit
   */
  atomicEnergy?: ScalarSchema;
  /**
   * sum of one electron energies of kinetic, electrostatic, and exchange correlation
   */
  eigenvalues?: ScalarSchema;
  /**
   * double counting correction 2
   */
  PAWDoubleCounting2?: ScalarSchema;
  /**
   * double counting correction 3
   */
  PAWDoubleCounting3?: ScalarSchema;
  /**
   * hartree-fock contribution
   */
  hartreeFock?: ScalarSchema;
  name?: "total_energy_contributions";
  units?: "kJ/mol" | "eV" | "J/mol" | "hartree" | "cm-1" | "rydberg" | "eV/atom";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-non-scalar-vibrational-spectrum-properties".
 */
export interface PropertiesDirectoryNonScalarVibrationalSpectrumProperties {
  xAxis?: {
    label?: "frequency" | "wavenumber";
    units?: "cm-1" | "THz" | "meV";
  };
  yAxis?: {
    label?: "Intensity" | "Absorbance" | "Absorption coefficient";
    units?: "(debye/angstrom)^2" | "km/mol" | "m/mol" | "a.u.";
  };
  name?: "vibrational_spectrum";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-electron-affinity-properties".
 */
export interface PropertiesDirectoryScalarElectronAffinityProperties {
  name?: "electron_affinity";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-fermi-energy-properties".
 */
export interface PropertiesDirectoryScalarFermiEnergyProperties {
  name?: "fermi_energy";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-formation-energy-properties".
 */
export interface PropertiesDirectoryScalarFormationEnergyProperties {
  name?: "formation_energy";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-ionization-potential-properties".
 */
export interface PropertiesDirectoryScalarIonizationPotentialProperties {
  name?: "ionization_potential";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-pressure-properties".
 */
export interface PropertiesDirectoryScalarPressureProperties {
  name?: "pressure";
  units?: "kbar" | "pa";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-reaction-energy-barrier-properties".
 */
export interface PropertiesDirectoryScalarReactionEnergyBarrierProperties {
  name?: "reaction_energy_barrier";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-surface-energy-properties".
 */
export interface PropertiesDirectoryScalarSurfaceEnergyProperties {
  name?: "surface_energy";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-total-energy-properties".
 */
export interface PropertiesDirectoryScalarTotalEnergyProperties {
  name?: "total_energy";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-total-force-properties".
 */
export interface PropertiesDirectoryScalarTotalForceProperties {
  name?: "total_force";
  units?: "eV/bohr" | "eV/angstrom" | "rydberg/a.u." | "newton" | "kg*m/s^2" | "eV/a.u.";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-valence-band-offset-properties".
 */
export interface PropertiesDirectoryScalarValenceBandOffsetProperties {
  name?: "valence_band_offset";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-scalar-zero-point-energy-properties".
 */
export interface PropertiesDirectoryScalarZeroPointEnergyProperties {
  name?: "zero_point_energy";
}
/**
 * coordinates of atoms by ids, vector, unitless
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-atomic-forces".
 */
export interface AtomicForces {
  name?: "atomic_forces";
  values?: AtomicVectorsSchema3;
  units?: "eV/bohr" | "eV/angstrom" | "rydberg/a.u." | "newton" | "kg*m/s^2" | "eV/a.u.";
}
/**
 * magnetization on each ion
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-magnetic-moments".
 */
export interface MagneticMoments {
  name?: "magnetic_moments";
  values?: AtomicVectorsSchema4;
  units?: "uB";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-patterns-functional-group".
 */
export interface FunctionalGroupPatternSchema {
  name?: "functional_group";
  atoms?: AtomicIds &
    {
      /**
       * whether atom connects to atoms outside of functional group.
       */
      isConnector?: boolean;
    }[];
  /**
   * SMARTS string for classification of FG; https://en.wikipedia.org/wiki/SMILES_arbitrary_target_specification
   */
  SMARTS?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-patterns-ring".
 */
export interface RingPatternSchema {
  name?: "ring";
  atoms?: AtomicIds &
    {
      /**
       * whether atom connects to atoms outside of functional group.
       */
      isConnector?: boolean;
    }[];
  isAromatic?: boolean;
}
/**
 * Any bonding interaction that cannot be described by simple 2-atom picture, e.g. 3-center-2-electron bond in diborane
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-patterns-special-bond".
 */
export interface SpecialBondPatternSchema {
  name?: "special_bond";
  atoms?: AtomicIds &
    {
      /**
       * whether atom connects to atoms outside of functional group.
       */
      isConnector?: boolean;
    }[];
}
/**
 * atomic constraints schema
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-basis-atomic-constraints".
 */
export interface AtomicConstraints {
  name?: "atomic_constraints";
  values?: AtomicVectorsSchema5;
}
/**
 * coordinates of atoms by ids, vector, unitless
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-structural-basis-atomic-coordinates".
 */
export interface AtomicCoordinates {
  name?: "atomic_coordinates";
  values?: AtomicCoordinate[];
  units?: "km" | "m" | "pm" | "nm" | "angstrom" | "a.u." | "bohr" | "fractional" | "crystal" | "cartesian" | "alat";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-workflow-convergence-electronic".
 */
export interface ElectronicSelfConsistencyConvergenceSchema {
  name?: "convergence_electronic";
  units?: "eV" | "rydberg" | "hartree";
  data: number[][];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-workflow-convergence-ionic".
 */
export interface IonicConvergenceSchema {
  name?: "convergence_ionic";
  /**
   * for ionic convergence tolerance shows force tolerance
   */
  tolerance?: {
    [k: string]: unknown;
  };
  /**
   * units for force tolerance
   */
  units?: "eV";
  /**
   * energetic and structural information
   */
  data: {
    /**
     * converged electronic energy for this structure (last in `electronic`)
     */
    energy?: number;
    /**
     * TODO: structural information at each step to be here
     */
    structure?: {};
    /**
     * data about electronic at this ionic step
     */
    electronic?: {
      /**
       * units for force tolerance
       */
      units?: "eV" | "rydberg" | "hartree";
      data?: number[];
    };
  }[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "properties-directory-workflow-convergence-kpoint".
 */
export interface ConvergenceSchemaForConvergingAPropertyWrtKpoints {
  /**
   * tolerance for the property under investigation
   */
  tolerance: {
    [k: string]: unknown;
  };
  /**
   * units for the property under investigation
   */
  units: string;
  /**
   * name of the property under investigation
   */
  property?: string;
  /**
   * kpoint grid and property information
   */
  data: {
    /**
     * value of the property at this step
     */
    value: {
      [k: string]: unknown;
    };
    /**
     * information about the kpoint grid
     */
    grid: {};
    /**
     * optional kpoint spacing information
     */
    spacing?: number;
  }[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "property-raw-properties".
 */
export interface PropertyRawProperties {
  /**
   * property slug, e.g. total_energy
   */
  slug?: string;
  /**
   * property group, e.g. qe:dft:gga:pbe
   */
  group?: string;
  /**
   * container of the information, specific to each property
   */
  data?: {};
  source?: TheSourceOfAPropertyThisCouldBeAnArticleASimulationOnExabyteAnExternalSimulationEtc;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "property-source".
 */
export interface TheSourceOfAPropertyThisCouldBeAnArticleASimulationOnExabyteAnExternalSimulationEtc {
  /**
   * Type of the material property's source.
   */
  type?: string;
  /**
   * Internet address of the reference.
   */
  url?: string;
  info?: CoreReferenceExabyte | InfoForCharacteristicObtainedByExperiment;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "property-refined-properties".
 */
export interface PropertyRefinedProperties {
  /**
   * Id of the corresponding item in the entity bank that this property is obtained for
   */
  exabyteId?: string[];
  precision?: {};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "property-best-properties".
 */
export interface PropertyBestProperties {
  /**
   * total number of properties among which this property is the best.
   */
  count?: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-input--inputItem".
 */
export interface ExecutionUnitInputItemSchemaForPhysicsBasedSimulationEngines {
  /**
   * Input file name. e.g. pw_scf.in
   */
  name: string;
  /**
   * Content of the input file. e.g. &CONTROL    calculation='scf' ...
   */
  content: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-template-properties".
 */
export interface SoftwareTemplateProperties {
  applicationName?: string;
  applicationVersion?: string;
  executableName?: string;
  contextProviders?: NameResultSchema[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-exabyteml".
 */
export interface ExabyteMachineLearningEngineSchema {
  name?: "exabyteml";
  summary?: "exabyte machine learning engine";
  version?: "0.2.0";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-execution-evaluate-cross-validate-properties".
 */
export interface SoftwareDirectoryMlUnitExecutionEvaluateCrossValidateProperties {
  /**
   * TODO: consider keeping executable `evaluate` and flavor `cross-validate` as before
   */
  input?: {
    /**
     * number of groups to split the training dataset for cross-validation
     */
    nSplits: number;
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-execution-train-properties".
 */
export interface SoftwareDirectoryMlUnitExecutionTrainProperties {
  /**
   * model train unit (NOTE: info about method, eg. regression/linear is taken from (sub)workflow)
   */
  input?: {
    /**
     * material features used for model fitting
     */
    features: string[];
    /**
     * target properties to train for
     */
    targets: string[];
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-execution-score-properties".
 */
export interface SoftwareDirectoryMlUnitExecutionScoreProperties {
  input?: unknown;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-execution-initialize-properties".
 */
export interface SoftwareDirectoryMlUnitExecutionInitializeProperties {
  /**
   * model init unit (NOTE: info about method, eg. regression/linear is taken from (sub)workflow)
   */
  input?: {
    /**
     * target properties to predict (NOTE: must be a subset of targets for which training was done)
     */
    targets: string[];
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-processing-data-transformation-scale-and-reduce-properties".
 */
export interface SoftwareDirectoryMlUnitProcessingDataTransformationScaleAndReduceProperties {
  operation?: "data_transformation";
  operationType?: "scale_and_reduce";
  inputData?: {
    /**
     * type of scaler to be applied
     */
    scaler: "standard_scaler";
    perFeature?: {
      /**
       * variance in original training data
       */
      variance?: number;
      /**
       * mean value of the original training data
       */
      mean?: number;
      /**
       * scale multiplier for this feature/property
       */
      scale: number;
      /**
       * feature/property name in 'flattened' format
       */
      name: string;
    }[];
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-processing-feature-selection-filter-based-properties".
 */
export interface SoftwareDirectoryMlUnitProcessingFeatureSelectionFilterBasedProperties {
  operation?: "feature_selection";
  operationType?: "filter_based";
  inputData?: {
    /**
     * number of features to select for model training. If equal to 0, will use all available features
     */
    nFeatures: number;
    /**
     * feature selection algorithm following sklearn.feature_selection
     */
    algorithm: "f_regression";
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-ml-unit-processing-data-transformation-manipulation-properties".
 */
export interface SoftwareDirectoryMlUnitProcessingDataTransformationManipulationProperties {
  operation?: "data_transformation";
  operationType?: "manipulation";
  inputData?: {
    /**
     * whether to clean missing data, eg. NaN
     */
    cleanMissingData: boolean;
    /**
     * whether to remove duplicate rows
     */
    removeDuplicateRows: boolean;
    /**
     * replace None values with a given value
     */
    replaceNoneValuesWith: number;
  };
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-modeling-espresso".
 */
export interface EspressoAppSchema {
  name?: "espresso";
  summary?: "Quantum Espresso";
  version?: "5.1.1" | "5.2.1" | "5.4.0" | "6.0.0";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-modeling-nwchem-properties".
 */
export interface SoftwareDirectoryModelingNwchemProperties {
  name?: "NWChem";
  summary?: "NWChem: a comprehensive and scalable open-source solution for large scale molecular simulations";
  version?: "6.6" | "7.0.2";
  exec?: "nwchem";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-modeling-vasp-properties".
 */
export interface SoftwareDirectoryModelingVaspProperties {
  name?: "vasp";
  summary?: "vienna ab-initio simulation package";
  flavor?: "vasp" | "vasp_nscf" | "vasp_bands";
  version?: "5.3.5";
  exec?: "vasp";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-input--input".
 */
export interface ExecutionUnitInputSchemaForPhysicsBasedSimulationEngines {
  input?: ExecutionUnitInputSchema1;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-scripting-jupyter-lab-properties".
 */
export interface SoftwareDirectoryScriptingJupyterLabProperties {
  name?: "jupyterLab";
  flavor?: "notebook";
  summary?: "Jupyter Lab";
  version?: "0.33.12";
  exec?: "jupyter";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-scripting-python-properties".
 */
export interface SoftwareDirectoryScriptingPythonProperties {
  name?: "python";
  flavor?: "python2" | "python3";
  summary?: "Python Script";
  version?: "2.7.5" | "3.6.1";
  exec?: "python";
  /**
   * Optional arguments passed to the Python script
   */
  arguments?: string;
  /**
   * Optional environment variables exported before running the Python script
   */
  environment?: {};
  /**
   * Optional Python dependencies, e.g. amqp==1.4.6
   */
  dependencies?: unknown[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "software-directory-scripting-shell-properties".
 */
export interface SoftwareDirectoryScriptingShellProperties {
  name?: "shell";
  flavor?: "sh" | "bash" | "zsh" | "csh";
  summary?: "Shell Script";
  version?: "4.2.46";
  exec?: "sh" | "bash" | "zsh" | "csh";
  /**
   * Optional arguments passed to the Shell script
   */
  arguments?: string;
  /**
   * Optional environment variables exported before running the Shell script
   */
  environment?: {};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system--material-properties".
 */
export interface SystemMaterialProperties {
  /**
   * Material class
   */
  cls?: "Material";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system--parent-job-properties".
 */
export interface SystemParentJobProperties {
  /**
   * Job class
   */
  cls?: "Job";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system--project-properties".
 */
export interface SystemProjectProperties {
  /**
   * Project class
   */
  cls?: "Project";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-bankable".
 */
export interface BankableSchema {
  /**
   * Identity of the corresponding bank entity
   */
  exabyteId?: string;
  /**
   * Hash string which is calculated based on the meaningful fields of the entity. Used to identify equal entities.
   */
  hash?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-creator-properties".
 */
export interface SystemCreatorProperties {
  /**
   * Creator class
   */
  cls?: "User";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-creator-account".
 */
export interface CreatorAccountSchema {
  creatorAccount?: EntityReferenceSchema;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-description".
 */
export interface ExtendedBaseEntitySchema {
  /**
   * entity description
   */
  description?: string;
  descriptionObject?: {};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-history".
 */
export interface HistorySchema {
  history?: {
    id: string;
    revision: number;
  }[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-in-set".
 */
export interface SystemInSetSchema {
  inSet?: (EntityReferenceSchema & {
    type?: string;
    index?: number;
  })[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-is-multi-material".
 */
export interface IsMultiSchema {
  isMultiMaterial?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-is-outdated".
 */
export interface IsOutdatedSchema {
  isOutdated?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-job-extended".
 */
export interface ExtendedJobSchema {
  mode?: string;
  isExternal?: boolean;
  _materials?: EntityReferenceSchema[];
  _materialsSet?: EntityReferenceSchema;
  purged?: boolean;
  purgedAt?: number;
  dataset?: {};
}
/**
 * communication message between Rupy and web application.
 *
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-message".
 */
export interface MessageSchema {
  header: {
    entity: {
      /**
       * job identifier
       */
      _id: string;
      /**
       * entity name.
       */
      name: "job" | "unit";
      /**
       * unit identifier within the workflow
       */
      flowchartId?: string;
      /**
       * source of the message.
       */
      probe?: "monitor" | "postprocessor";
    };
    /**
     * Rupy-Webapp communication schema version.
     */
    version: string;
    /**
     * Timestamp of the message.
     */
    timestamp: number;
  };
  /**
   * Actual payload of the message.
   */
  payload: {};
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-owner-properties".
 */
export interface SystemOwnerProperties {
  /**
   * Entity owner class
   */
  cls?: "Account";
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-scope".
 */
export interface ScopeSchema {
  scope?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-set".
 */
export interface EntitySetSchema {
  isEntitySet?: boolean;
  entitySetType?: string;
  entityCls?: string;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-sharing".
 */
export interface ExtendedSharingSchema {
  sharedCount?: number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-soft-removable".
 */
export interface SoftRemovableEntitySchema {
  /**
   * Timestamp of the moment when entity was removed
   */
  removedAt?: string;
  /**
   * Identifies that entity was removed
   */
  removed?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-status".
 */
export interface StatusSchema {
  status?: string;
  statusTrack?: {
    trackedAt: number;
    status: string;
    repetition?: number;
  }[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-tags".
 */
export interface EntityTagsSchema {
  /**
   * entity tags
   */
  tags?: string[];
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-timestampable".
 */
export interface TimestampableEntitySchema {
  /**
   * entity creation time
   */
  createdAt?: string;
  /**
   * entity last modification time
   */
  updatedAt?: string;
  createdBy?: string | number;
  updatedBy?: string | number;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "system-use-values".
 */
export interface UseValuesSchema {
  useValues?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-new-subworkflow".
 */
export interface NewSubworkflow {
  /**
   * subworkflow identity
   */
  _id: string;
  /**
   * Human-readable name of the subworkflow. e.g. Total-energy
   */
  name: string;
  /**
   * Model used inside the subworkflow
   */
  model: KohnShamDensityFunctionTheorySchema | MachineLearningModelSchema | UnknownModelSchema;
  application: ApplicationSchemaBase;
  /**
   * Array of characteristic properties calculated by this subworkflow
   */
  properties: string[];
  /**
   * Contains the Units of the subworkflow
   */
  units: WorkflowUnitSchema[];
  compute?: ComputeArgumentsSchema;
  /**
   * Defines whether to store the results/properties extracted in this unit to properties collection
   */
  isDraft?: boolean;
}
/**
 * This interface was referenced by `GlobalSchema`'s JSON-Schema
 * via the `definition` "workflow-unit-runtime--runtime-item-full-object".
 */
export interface FullResultSchema {
  /**
   * The name of this item. e.g. 'my_custom_property. <OTHER FIELDS TO BE ADDED>'
   */
  name: string;
}
