# parse a custom !combine tag with forEach and config keys
case1: !combine
    name: mytest
    forEach:
        - key: a
          values: [1, 2]
        - key: b
          values: [3, 4]
    config:
        c: 5

# parse a custom !combine tag with only a name key
case2: !combine
    name: mytest

# parse a custom !combine tag with forEach key and no values
case3: !combine
    name: mytest
    forEach:
        - key: a
        - key: b

# parse a custom !combine tag with an empty forEach key and a config key
case4: !combine
    name: mytest
    forEach: []
    config:
        c: 5

# generate name based on template
case5: !combine
    name:
        template: A{{ a }} with B{{ b }} and C5
        substitutions:
            two: 2
            four: 4
    forEach:
        - key: a
          values: [1]
        - key: b
          values: ["two", "four"]
    config:
        c: 5

# parse a custom !combine tag with additional property
case6: !combine
    name: mytest
    forEach:
        - key: b
          values: [3, 4]
    config:
        a: 1
    extraConfigs:
        - name: additional property
          x: 7

# parse a custom !combine tag with additional property from !combine tag
case7: !combine
    name: mytest
    forEach:
        - key: b
          values: [3, 4]
    config:
        a: 1
    extraConfigs: !combine
        name: additional property
        forEach:
            - key: x
              values: [7, 8]
        config:
            y: 9

# create an additional config when includeNull parameter is provided
case8: !combine
    name:
        template: "A{{ a }}{{ ' with B' + b if b }}"
        substitutions:
            two: 2
            four: 4
    forEach:
        - key: b
          values: ["two", "four", null]
    config:
        a: 1

# create all combinations of n optional parameters
case9: !combine
    name: optional params
    forEach:
        - key: b
          values: [2, 3, null]
        - key: c
          values: [4, null]
    config:
        a: 1

# exclude certain parameter-specified combinations
case10: !combine
    name: ignore test
    forEach:
        - key: a.b
          values: [1, 2, null]
        - key: a.c
          values: [3]
        - key: d
          values: [4]
    exclusions:
        - ["a.b", "d"]

# use the push action to add value to an array parameter
case11: !combine
    name: push test
    forEach:
        - key: units
          action: push
          values:
              - a: 1
              - a: 2
              - a: 3
        - key: units
          action: push
          values:
              - b: 4
              - b: 5
# use cloned objects when pushing to array
case12: !combine
    name: push test
    forEach:
        - key: units
          action: push
          values: !combine
              name: "Wave function: Plane wave"
              config:
                  categories:
                      tier1: qm
                      tier2: wf
                      type: pw
                  tags:
                      - plane wave
                  schema: !esse "methods-directory/physical/pw"
        - key: units
          action: push
          values:
              - b: 4
              - b: 5
